
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime';

export import DMMF = runtime.DMMF

/**
 * Prisma Errors
 */
export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
export import PrismaClientValidationError = runtime.PrismaClientValidationError

/**
 * Re-export of sql-template-tag
 */
export import sql = runtime.sqltag
export import empty = runtime.empty
export import join = runtime.join
export import raw = runtime.raw
export import Sql = runtime.Sql

/**
 * Decimal.js
 */
export import Decimal = runtime.Decimal

/**
 * Prisma Client JS version: 2.13.1
 * Query Engine version: fcbc4bb2d306c86c28014f596b1e8c7980af8bd4
 */
export type PrismaVersion = {
  client: string
}

export const prismaVersion: PrismaVersion 

/**
 * Utility Types
 */

/**
 * From https://github.com/sindresorhus/type-fest/
 * Matches a JSON object.
 * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
 */
export type JsonObject = {[Key in string]?: JsonValue}
 
/**
 * From https://github.com/sindresorhus/type-fest/
 * Matches a JSON array.
 */
export interface JsonArray extends Array<JsonValue> {}
 
/**
 * From https://github.com/sindresorhus/type-fest/
 * Matches any valid JSON value.
 */
export type JsonValue = string | number | boolean | null | JsonObject | JsonArray

/**
 * Same as JsonObject, but allows undefined
 */
export type InputJsonObject = {[Key in string]?: JsonValue}
 
export interface InputJsonArray extends Array<JsonValue> {}
 
export type InputJsonValue = undefined |  string | number | boolean | null | InputJsonObject | InputJsonArray
 type SelectAndInclude = {
  select: any
  include: any
}
type HasSelect = {
  select: any
}
type HasInclude = {
  include: any
}
type CheckSelect<T, S, U> = T extends SelectAndInclude
  ? 'Please either choose `select` or `include`'
  : T extends HasSelect
  ? U
  : T extends HasInclude
  ? U
  : S

/**
 * Get the type of the value, that the Promise holds.
 */
export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

/**
 * Get the return type of a function which returns a Promise.
 */
export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>


export type Enumerable<T> = T | Array<T>;

export type RequiredKeys<T> = {
  [K in keyof T]-?: {} extends Pick<T, K> ? never : K
}[keyof T]

export type TruthyKeys<T> = {
  [key in keyof T]: T[key] extends false | undefined | null ? never : key
}[keyof T]

export type TrueKeys<T> = TruthyKeys<Pick<T, RequiredKeys<T>>>

/**
 * Subset
 * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
 */
export type Subset<T, U> = {
  [key in keyof T]: key extends keyof U ? T[key] : never;
};

type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

/**
 * XOR is needed to have a real mutually exclusive union type
 * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
 */
type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;



/**
 * Used by group by
 */
export type GetScalarType<T, O> = O extends object ? {
  [P in keyof T]: P extends keyof O
    ? O[P]
    : never
} : never

/**
 * Convert tuple to union
 */
type _TupleToUnion<T> = T extends (infer E)[] ? E : never
type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>

/**
 * Like `Pick`, but with an array
 */
type PickArray<T, K extends Array<keyof T>> = Pick<T, TupleToUnion<K>>





/**
 * Model User
 */

export type User = {
  id: string
  email: string
  username: string
  password: string
  confirmed: boolean
  created_at: Date
}

/**
 * Model Photobook
 */

export type Photobook = {
  id: string
  userId: string | null
  created_at: Date
  likesCount: number
  commentsCount: number
  cover_image_id: string
  cover_text: string
}

/**
 * Model Photo
 */

export type Photo = {
  id: string
  img_id: string
  text_data: string
  photobookId: string | null
  created_at: Date
}

/**
 * Model Comment
 */

export type Comment = {
  id: string
  body: string
  photobookId: string | null
  userId: string | null
  created_at: Date
}

/**
 * Model Like
 */

export type Like = {
  id: string
  userId: string | null
  photobookId: string | null
  commentId: string | null
  created_at: Date
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js (ORM replacement)
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js (ORM replacement)
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: T);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<any>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

  /**
   * Executes a raw query and returns the number of affected rows
   * @example
   * ```
   * // With parameters use prisma.executeRaw``, values will be escaped automatically
   * const result = await prisma.executeRaw`UPDATE User SET cool = ${true} WHERE id = ${1};`
   * // Or
   * const result = await prisma.executeRaw('UPDATE User SET cool = $1 WHERE id = $2 ;', true, 1)
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $executeRaw < T = any > (query: string | TemplateStringsArray | Prisma.Sql, ...values: any[]): Promise<number>;

  /**
   * Performs a raw query and returns the SELECT data
   * @example
   * ```
   * // With parameters use prisma.queryRaw``, values will be escaped automatically
   * const result = await prisma.queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'ema.il'};`
   * // Or
   * const result = await prisma.queryRaw('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'ema.il')
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $queryRaw < T = any > (query: string | TemplateStringsArray | Prisma.Sql, ...values: any[]): Promise<T>;

  /**
   * Execute queries in a transaction
   * @example
   * ```
   * const [george, bob, alice] = await prisma.transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   */
  $transaction: PromiseConstructor['all']

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate;

  /**
   * `prisma.photobook`: Exposes CRUD operations for the **Photobook** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Photobooks
    * const photobooks = await prisma.photobook.findMany()
    * ```
    */
  get photobook(): Prisma.PhotobookDelegate;

  /**
   * `prisma.photo`: Exposes CRUD operations for the **Photo** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Photos
    * const photos = await prisma.photo.findMany()
    * ```
    */
  get photo(): Prisma.PhotoDelegate;

  /**
   * `prisma.comment`: Exposes CRUD operations for the **Comment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Comments
    * const comments = await prisma.comment.findMany()
    * ```
    */
  get comment(): Prisma.CommentDelegate;

  /**
   * `prisma.like`: Exposes CRUD operations for the **Like** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Likes
    * const likes = await prisma.like.findMany()
    * ```
    */
  get like(): Prisma.LikeDelegate;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  /**
   * Prisma Client JS version: 2.13.1
   * Query Engine version: fcbc4bb2d306c86c28014f596b1e8c7980af8bd4
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | null | JsonObject | JsonArray

  /**
   * Same as JsonObject, but allows undefined
   */
  export type InputJsonObject = {[Key in string]?: JsonValue}
 
  export interface InputJsonArray extends Array<JsonValue> {}
 
  export type InputJsonValue = undefined |  string | number | boolean | null | InputJsonObject | InputJsonArray
   type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;



  /**
   * Used by group by
   */
  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Pick<T, TupleToUnion<K>>

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    User: 'User',
    Photobook: 'Photobook',
    Photo: 'Photo',
    Comment: 'Comment',
    Like: 'Like'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined; 
  export type Datasource = {
    url?: string
  }


  /**
   * Model User
   */


  export type AggregateUser = {
    count: number | null
    min: UserMinAggregateOutputType | null
    max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    username: string | null
    password: string | null
    confirmed: boolean | null
    created_at: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    username: string | null
    password: string | null
    confirmed: boolean | null
    created_at: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number | null
    email: number | null
    username: number | null
    password: number | null
    confirmed: number | null
    created_at: number | null
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    username?: true
    password?: true
    confirmed?: true
    created_at?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    username?: true
    password?: true
    confirmed?: true
    created_at?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    username?: true
    password?: true
    confirmed?: true
    created_at?: true
    _all?: true
  }

  export type AggregateUserArgs = {
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByInput>
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    count?: true
    min?: UserMinAggregateInputType
    max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends AggregateUserArgs> = {
    [P in keyof T]: P extends 'count' ? number : never
  }



    



  export type UserSelect = {
    id?: boolean
    email?: boolean
    username?: boolean
    password?: boolean
    confirmed?: boolean
    created_at?: boolean
    photobooks?: boolean | FindManyPhotobookArgs
    comments?: boolean | FindManyCommentArgs
    Like?: boolean | FindManyLikeArgs
  }

  export type UserInclude = {
    photobooks?: boolean | FindManyPhotobookArgs
    comments?: boolean | FindManyCommentArgs
    Like?: boolean | FindManyLikeArgs
  }

  export type UserGetPayload<
    S extends boolean | null | undefined | UserArgs,
    U = keyof S
      > = S extends true
        ? User
    : S extends undefined
    ? never
    : S extends UserArgs | FindManyUserArgs
    ?'include' extends U
    ? User  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'photobooks'
        ? Array < PhotobookGetPayload<S['include'][P]>>  :
        P extends 'comments'
        ? Array < CommentGetPayload<S['include'][P]>>  :
        P extends 'Like'
        ? Array < LikeGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof User ?User [P]
  : 
          P extends 'photobooks'
        ? Array < PhotobookGetPayload<S['select'][P]>>  :
        P extends 'comments'
        ? Array < CommentGetPayload<S['select'][P]>>  :
        P extends 'Like'
        ? Array < LikeGetPayload<S['select'][P]>>  : never
  } 
    : User
  : User


  export interface UserDelegate {
    /**
     * Find zero or one User that matches the filter.
     * @param {FindUniqueUserArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniqueUserArgs>(
      args: Subset<T, FindUniqueUserArgs>
    ): CheckSelect<T, Prisma__UserClient<User | null>, Prisma__UserClient<UserGetPayload<T> | null>>
    /**
     * Find the first User that matches the filter.
     * @param {FindFirstUserArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirstUserArgs>(
      args?: Subset<T, FindFirstUserArgs>
    ): CheckSelect<T, Prisma__UserClient<User | null>, Prisma__UserClient<UserGetPayload<T> | null>>
    /**
     * Find zero or more Users that matches the filter.
     * @param {FindManyUserArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FindManyUserArgs>(
      args?: Subset<T, FindManyUserArgs>
    ): CheckSelect<T, Promise<Array<User>>, Promise<Array<UserGetPayload<T>>>>
    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: Subset<T, UserCreateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>
    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: Subset<T, UserDeleteArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>
    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: Subset<T, UserUpdateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>
    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args?: Subset<T, UserDeleteManyArgs>
    ): Promise<BatchPayload>
    /**
     * Update zero or more Users.
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: Subset<T, UserUpdateManyArgs>
    ): Promise<BatchPayload>
    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: Subset<T, UserUpsertArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>
    /**
     * Find zero or one User that matches the filter.
     * @param {FindUniqueUserArgs} args - Arguments to find a User
     * @deprecated This will be deprecated please use prisma.user.findUnique
     * @example
     * // Get one User
     * const user = await prisma.user.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniqueUserArgs>(
      args: Subset<T, FindUniqueUserArgs>
    ): CheckSelect<T, Prisma__UserClient<User | null>, Prisma__UserClient<UserGetPayload<T> | null>>
    /**
     * Count
     */
    count(args?: Omit<FindManyUserArgs, 'select' | 'include'>): Promise<number>

  

    /**
     * Aggregate
     */
    aggregate<T extends AggregateUserArgs>(args: Subset<T, AggregateUserArgs>): Promise<GetUserAggregateType<T>>
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    photobooks<T extends FindManyPhotobookArgs = {}>(args?: Subset<T, FindManyPhotobookArgs>): CheckSelect<T, Promise<Array<Photobook>>, Promise<Array<PhotobookGetPayload<T>>>>;

    comments<T extends FindManyCommentArgs = {}>(args?: Subset<T, FindManyCommentArgs>): CheckSelect<T, Promise<Array<Comment>>, Promise<Array<CommentGetPayload<T>>>>;

    Like<T extends FindManyLikeArgs = {}>(args?: Subset<T, FindManyLikeArgs>): CheckSelect<T, Promise<Array<Like>>, Promise<Array<LikeGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * User findUnique
   */
  export type FindUniqueUserArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User findFirst
   */
  export type FindFirstUserArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
    **/
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByInput>
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User findMany
   */
  export type FindManyUserArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserInclude | null
    /**
     * Filter, which Users to fetch.
    **/
    where?: UserWhereInput
    /**
     * Determine the order of the Users to fetch.
    **/
    orderBy?: Enumerable<UserOrderByInput>
    /**
     * Sets the position for listing Users.
    **/
    cursor?: UserWhereUniqueInput
    /**
     * The number of Users to fetch. If negative number, it will take Users before the `cursor`.
    **/
    take?: number
    /**
     * Skip the first `n` Users.
    **/
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserInclude | null
    /**
     * The data needed to create a User.
    **/
    data: UserCreateInput
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserInclude | null
    /**
     * The data needed to update a User.
    **/
    data: UserUpdateInput
    /**
     * Choose, which User to update.
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    data: UserUpdateManyMutationInput
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserInclude | null
    /**
     * The filter to search for the User to update in case it exists.
    **/
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
    **/
    create: UserCreateInput
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
    **/
    update: UserUpdateInput
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserInclude | null
    /**
     * Filter which User to delete.
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    where?: UserWhereInput
  }


  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserInclude | null
  }



  /**
   * Model Photobook
   */


  export type AggregatePhotobook = {
    count: number | null
    avg: PhotobookAvgAggregateOutputType | null
    sum: PhotobookSumAggregateOutputType | null
    min: PhotobookMinAggregateOutputType | null
    max: PhotobookMaxAggregateOutputType | null
  }

  export type PhotobookAvgAggregateOutputType = {
    likesCount: number
    commentsCount: number
  }

  export type PhotobookSumAggregateOutputType = {
    likesCount: number
    commentsCount: number
  }

  export type PhotobookMinAggregateOutputType = {
    id: string | null
    userId: string | null
    created_at: Date | null
    likesCount: number
    commentsCount: number
    cover_image_id: string | null
    cover_text: string | null
  }

  export type PhotobookMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    created_at: Date | null
    likesCount: number
    commentsCount: number
    cover_image_id: string | null
    cover_text: string | null
  }

  export type PhotobookCountAggregateOutputType = {
    id: number | null
    userId: number | null
    created_at: number | null
    likesCount: number
    commentsCount: number
    cover_image_id: number | null
    cover_text: number | null
    _all: number
  }


  export type PhotobookAvgAggregateInputType = {
    likesCount?: true
    commentsCount?: true
  }

  export type PhotobookSumAggregateInputType = {
    likesCount?: true
    commentsCount?: true
  }

  export type PhotobookMinAggregateInputType = {
    id?: true
    userId?: true
    created_at?: true
    likesCount?: true
    commentsCount?: true
    cover_image_id?: true
    cover_text?: true
  }

  export type PhotobookMaxAggregateInputType = {
    id?: true
    userId?: true
    created_at?: true
    likesCount?: true
    commentsCount?: true
    cover_image_id?: true
    cover_text?: true
  }

  export type PhotobookCountAggregateInputType = {
    id?: true
    userId?: true
    created_at?: true
    likesCount?: true
    commentsCount?: true
    cover_image_id?: true
    cover_text?: true
    _all?: true
  }

  export type AggregatePhotobookArgs = {
    where?: PhotobookWhereInput
    orderBy?: Enumerable<PhotobookOrderByInput>
    cursor?: PhotobookWhereUniqueInput
    take?: number
    skip?: number
    count?: true
    avg?: PhotobookAvgAggregateInputType
    sum?: PhotobookSumAggregateInputType
    min?: PhotobookMinAggregateInputType
    max?: PhotobookMaxAggregateInputType
  }

  export type GetPhotobookAggregateType<T extends AggregatePhotobookArgs> = {
    [P in keyof T]: P extends 'count' ? number : GetPhotobookAggregateScalarType<T[P]>
  }

  export type GetPhotobookAggregateScalarType<T extends any> = {
    [P in keyof T]: P extends keyof PhotobookAvgAggregateOutputType ? PhotobookAvgAggregateOutputType[P] : never
  }

    



  export type PhotobookSelect = {
    id?: boolean
    user?: boolean | UserArgs
    userId?: boolean
    photos?: boolean | FindManyPhotoArgs
    created_at?: boolean
    likesCount?: boolean
    commentsCount?: boolean
    cover_image_id?: boolean
    cover_text?: boolean
    comments?: boolean | FindManyCommentArgs
    likes?: boolean | FindManyLikeArgs
  }

  export type PhotobookInclude = {
    user?: boolean | UserArgs
    photos?: boolean | FindManyPhotoArgs
    comments?: boolean | FindManyCommentArgs
    likes?: boolean | FindManyLikeArgs
  }

  export type PhotobookGetPayload<
    S extends boolean | null | undefined | PhotobookArgs,
    U = keyof S
      > = S extends true
        ? Photobook
    : S extends undefined
    ? never
    : S extends PhotobookArgs | FindManyPhotobookArgs
    ?'include' extends U
    ? Photobook  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'user'
        ? UserGetPayload<S['include'][P]> | null :
        P extends 'photos'
        ? Array < PhotoGetPayload<S['include'][P]>>  :
        P extends 'comments'
        ? Array < CommentGetPayload<S['include'][P]>>  :
        P extends 'likes'
        ? Array < LikeGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Photobook ?Photobook [P]
  : 
          P extends 'user'
        ? UserGetPayload<S['select'][P]> | null :
        P extends 'photos'
        ? Array < PhotoGetPayload<S['select'][P]>>  :
        P extends 'comments'
        ? Array < CommentGetPayload<S['select'][P]>>  :
        P extends 'likes'
        ? Array < LikeGetPayload<S['select'][P]>>  : never
  } 
    : Photobook
  : Photobook


  export interface PhotobookDelegate {
    /**
     * Find zero or one Photobook that matches the filter.
     * @param {FindUniquePhotobookArgs} args - Arguments to find a Photobook
     * @example
     * // Get one Photobook
     * const photobook = await prisma.photobook.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniquePhotobookArgs>(
      args: Subset<T, FindUniquePhotobookArgs>
    ): CheckSelect<T, Prisma__PhotobookClient<Photobook | null>, Prisma__PhotobookClient<PhotobookGetPayload<T> | null>>
    /**
     * Find the first Photobook that matches the filter.
     * @param {FindFirstPhotobookArgs} args - Arguments to find a Photobook
     * @example
     * // Get one Photobook
     * const photobook = await prisma.photobook.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirstPhotobookArgs>(
      args?: Subset<T, FindFirstPhotobookArgs>
    ): CheckSelect<T, Prisma__PhotobookClient<Photobook | null>, Prisma__PhotobookClient<PhotobookGetPayload<T> | null>>
    /**
     * Find zero or more Photobooks that matches the filter.
     * @param {FindManyPhotobookArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Photobooks
     * const photobooks = await prisma.photobook.findMany()
     * 
     * // Get first 10 Photobooks
     * const photobooks = await prisma.photobook.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const photobookWithIdOnly = await prisma.photobook.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FindManyPhotobookArgs>(
      args?: Subset<T, FindManyPhotobookArgs>
    ): CheckSelect<T, Promise<Array<Photobook>>, Promise<Array<PhotobookGetPayload<T>>>>
    /**
     * Create a Photobook.
     * @param {PhotobookCreateArgs} args - Arguments to create a Photobook.
     * @example
     * // Create one Photobook
     * const Photobook = await prisma.photobook.create({
     *   data: {
     *     // ... data to create a Photobook
     *   }
     * })
     * 
    **/
    create<T extends PhotobookCreateArgs>(
      args: Subset<T, PhotobookCreateArgs>
    ): CheckSelect<T, Prisma__PhotobookClient<Photobook>, Prisma__PhotobookClient<PhotobookGetPayload<T>>>
    /**
     * Delete a Photobook.
     * @param {PhotobookDeleteArgs} args - Arguments to delete one Photobook.
     * @example
     * // Delete one Photobook
     * const Photobook = await prisma.photobook.delete({
     *   where: {
     *     // ... filter to delete one Photobook
     *   }
     * })
     * 
    **/
    delete<T extends PhotobookDeleteArgs>(
      args: Subset<T, PhotobookDeleteArgs>
    ): CheckSelect<T, Prisma__PhotobookClient<Photobook>, Prisma__PhotobookClient<PhotobookGetPayload<T>>>
    /**
     * Update one Photobook.
     * @param {PhotobookUpdateArgs} args - Arguments to update one Photobook.
     * @example
     * // Update one Photobook
     * const photobook = await prisma.photobook.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PhotobookUpdateArgs>(
      args: Subset<T, PhotobookUpdateArgs>
    ): CheckSelect<T, Prisma__PhotobookClient<Photobook>, Prisma__PhotobookClient<PhotobookGetPayload<T>>>
    /**
     * Delete zero or more Photobooks.
     * @param {PhotobookDeleteManyArgs} args - Arguments to filter Photobooks to delete.
     * @example
     * // Delete a few Photobooks
     * const { count } = await prisma.photobook.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PhotobookDeleteManyArgs>(
      args?: Subset<T, PhotobookDeleteManyArgs>
    ): Promise<BatchPayload>
    /**
     * Update zero or more Photobooks.
     * @param {PhotobookUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Photobooks
     * const photobook = await prisma.photobook.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PhotobookUpdateManyArgs>(
      args: Subset<T, PhotobookUpdateManyArgs>
    ): Promise<BatchPayload>
    /**
     * Create or update one Photobook.
     * @param {PhotobookUpsertArgs} args - Arguments to update or create a Photobook.
     * @example
     * // Update or create a Photobook
     * const photobook = await prisma.photobook.upsert({
     *   create: {
     *     // ... data to create a Photobook
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Photobook we want to update
     *   }
     * })
    **/
    upsert<T extends PhotobookUpsertArgs>(
      args: Subset<T, PhotobookUpsertArgs>
    ): CheckSelect<T, Prisma__PhotobookClient<Photobook>, Prisma__PhotobookClient<PhotobookGetPayload<T>>>
    /**
     * Find zero or one Photobook that matches the filter.
     * @param {FindUniquePhotobookArgs} args - Arguments to find a Photobook
     * @deprecated This will be deprecated please use prisma.photobook.findUnique
     * @example
     * // Get one Photobook
     * const photobook = await prisma.photobook.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniquePhotobookArgs>(
      args: Subset<T, FindUniquePhotobookArgs>
    ): CheckSelect<T, Prisma__PhotobookClient<Photobook | null>, Prisma__PhotobookClient<PhotobookGetPayload<T> | null>>
    /**
     * Count
     */
    count(args?: Omit<FindManyPhotobookArgs, 'select' | 'include'>): Promise<number>

  

    /**
     * Aggregate
     */
    aggregate<T extends AggregatePhotobookArgs>(args: Subset<T, AggregatePhotobookArgs>): Promise<GetPhotobookAggregateType<T>>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Photobook.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__PhotobookClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    user<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null>, Prisma__UserClient<UserGetPayload<T> | null>>;

    photos<T extends FindManyPhotoArgs = {}>(args?: Subset<T, FindManyPhotoArgs>): CheckSelect<T, Promise<Array<Photo>>, Promise<Array<PhotoGetPayload<T>>>>;

    comments<T extends FindManyCommentArgs = {}>(args?: Subset<T, FindManyCommentArgs>): CheckSelect<T, Promise<Array<Comment>>, Promise<Array<CommentGetPayload<T>>>>;

    likes<T extends FindManyLikeArgs = {}>(args?: Subset<T, FindManyLikeArgs>): CheckSelect<T, Promise<Array<Like>>, Promise<Array<LikeGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Photobook findUnique
   */
  export type FindUniquePhotobookArgs = {
    /**
     * Select specific fields to fetch from the Photobook
    **/
    select?: PhotobookSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: PhotobookInclude | null
    /**
     * Filter, which Photobook to fetch.
    **/
    where: PhotobookWhereUniqueInput
  }


  /**
   * Photobook findFirst
   */
  export type FindFirstPhotobookArgs = {
    /**
     * Select specific fields to fetch from the Photobook
    **/
    select?: PhotobookSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: PhotobookInclude | null
    /**
     * Filter, which Photobook to fetch.
    **/
    where?: PhotobookWhereInput
    orderBy?: Enumerable<PhotobookOrderByInput>
    cursor?: PhotobookWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<PhotobookScalarFieldEnum>
  }


  /**
   * Photobook findMany
   */
  export type FindManyPhotobookArgs = {
    /**
     * Select specific fields to fetch from the Photobook
    **/
    select?: PhotobookSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: PhotobookInclude | null
    /**
     * Filter, which Photobooks to fetch.
    **/
    where?: PhotobookWhereInput
    /**
     * Determine the order of the Photobooks to fetch.
    **/
    orderBy?: Enumerable<PhotobookOrderByInput>
    /**
     * Sets the position for listing Photobooks.
    **/
    cursor?: PhotobookWhereUniqueInput
    /**
     * The number of Photobooks to fetch. If negative number, it will take Photobooks before the `cursor`.
    **/
    take?: number
    /**
     * Skip the first `n` Photobooks.
    **/
    skip?: number
    distinct?: Enumerable<PhotobookScalarFieldEnum>
  }


  /**
   * Photobook create
   */
  export type PhotobookCreateArgs = {
    /**
     * Select specific fields to fetch from the Photobook
    **/
    select?: PhotobookSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: PhotobookInclude | null
    /**
     * The data needed to create a Photobook.
    **/
    data: PhotobookCreateInput
  }


  /**
   * Photobook update
   */
  export type PhotobookUpdateArgs = {
    /**
     * Select specific fields to fetch from the Photobook
    **/
    select?: PhotobookSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: PhotobookInclude | null
    /**
     * The data needed to update a Photobook.
    **/
    data: PhotobookUpdateInput
    /**
     * Choose, which Photobook to update.
    **/
    where: PhotobookWhereUniqueInput
  }


  /**
   * Photobook updateMany
   */
  export type PhotobookUpdateManyArgs = {
    data: PhotobookUpdateManyMutationInput
    where?: PhotobookWhereInput
  }


  /**
   * Photobook upsert
   */
  export type PhotobookUpsertArgs = {
    /**
     * Select specific fields to fetch from the Photobook
    **/
    select?: PhotobookSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: PhotobookInclude | null
    /**
     * The filter to search for the Photobook to update in case it exists.
    **/
    where: PhotobookWhereUniqueInput
    /**
     * In case the Photobook found by the `where` argument doesn't exist, create a new Photobook with this data.
    **/
    create: PhotobookCreateInput
    /**
     * In case the Photobook was found with the provided `where` argument, update it with this data.
    **/
    update: PhotobookUpdateInput
  }


  /**
   * Photobook delete
   */
  export type PhotobookDeleteArgs = {
    /**
     * Select specific fields to fetch from the Photobook
    **/
    select?: PhotobookSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: PhotobookInclude | null
    /**
     * Filter which Photobook to delete.
    **/
    where: PhotobookWhereUniqueInput
  }


  /**
   * Photobook deleteMany
   */
  export type PhotobookDeleteManyArgs = {
    where?: PhotobookWhereInput
  }


  /**
   * Photobook without action
   */
  export type PhotobookArgs = {
    /**
     * Select specific fields to fetch from the Photobook
    **/
    select?: PhotobookSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: PhotobookInclude | null
  }



  /**
   * Model Photo
   */


  export type AggregatePhoto = {
    count: number | null
    min: PhotoMinAggregateOutputType | null
    max: PhotoMaxAggregateOutputType | null
  }

  export type PhotoMinAggregateOutputType = {
    id: string | null
    img_id: string | null
    text_data: string | null
    photobookId: string | null
    created_at: Date | null
  }

  export type PhotoMaxAggregateOutputType = {
    id: string | null
    img_id: string | null
    text_data: string | null
    photobookId: string | null
    created_at: Date | null
  }

  export type PhotoCountAggregateOutputType = {
    id: number | null
    img_id: number | null
    text_data: number | null
    photobookId: number | null
    created_at: number | null
    _all: number
  }


  export type PhotoMinAggregateInputType = {
    id?: true
    img_id?: true
    text_data?: true
    photobookId?: true
    created_at?: true
  }

  export type PhotoMaxAggregateInputType = {
    id?: true
    img_id?: true
    text_data?: true
    photobookId?: true
    created_at?: true
  }

  export type PhotoCountAggregateInputType = {
    id?: true
    img_id?: true
    text_data?: true
    photobookId?: true
    created_at?: true
    _all?: true
  }

  export type AggregatePhotoArgs = {
    where?: PhotoWhereInput
    orderBy?: Enumerable<PhotoOrderByInput>
    cursor?: PhotoWhereUniqueInput
    take?: number
    skip?: number
    count?: true
    min?: PhotoMinAggregateInputType
    max?: PhotoMaxAggregateInputType
  }

  export type GetPhotoAggregateType<T extends AggregatePhotoArgs> = {
    [P in keyof T]: P extends 'count' ? number : never
  }



    



  export type PhotoSelect = {
    id?: boolean
    img_id?: boolean
    text_data?: boolean
    Photobook?: boolean | PhotobookArgs
    photobookId?: boolean
    created_at?: boolean
  }

  export type PhotoInclude = {
    Photobook?: boolean | PhotobookArgs
  }

  export type PhotoGetPayload<
    S extends boolean | null | undefined | PhotoArgs,
    U = keyof S
      > = S extends true
        ? Photo
    : S extends undefined
    ? never
    : S extends PhotoArgs | FindManyPhotoArgs
    ?'include' extends U
    ? Photo  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'Photobook'
        ? PhotobookGetPayload<S['include'][P]> | null : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Photo ?Photo [P]
  : 
          P extends 'Photobook'
        ? PhotobookGetPayload<S['select'][P]> | null : never
  } 
    : Photo
  : Photo


  export interface PhotoDelegate {
    /**
     * Find zero or one Photo that matches the filter.
     * @param {FindUniquePhotoArgs} args - Arguments to find a Photo
     * @example
     * // Get one Photo
     * const photo = await prisma.photo.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniquePhotoArgs>(
      args: Subset<T, FindUniquePhotoArgs>
    ): CheckSelect<T, Prisma__PhotoClient<Photo | null>, Prisma__PhotoClient<PhotoGetPayload<T> | null>>
    /**
     * Find the first Photo that matches the filter.
     * @param {FindFirstPhotoArgs} args - Arguments to find a Photo
     * @example
     * // Get one Photo
     * const photo = await prisma.photo.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirstPhotoArgs>(
      args?: Subset<T, FindFirstPhotoArgs>
    ): CheckSelect<T, Prisma__PhotoClient<Photo | null>, Prisma__PhotoClient<PhotoGetPayload<T> | null>>
    /**
     * Find zero or more Photos that matches the filter.
     * @param {FindManyPhotoArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Photos
     * const photos = await prisma.photo.findMany()
     * 
     * // Get first 10 Photos
     * const photos = await prisma.photo.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const photoWithIdOnly = await prisma.photo.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FindManyPhotoArgs>(
      args?: Subset<T, FindManyPhotoArgs>
    ): CheckSelect<T, Promise<Array<Photo>>, Promise<Array<PhotoGetPayload<T>>>>
    /**
     * Create a Photo.
     * @param {PhotoCreateArgs} args - Arguments to create a Photo.
     * @example
     * // Create one Photo
     * const Photo = await prisma.photo.create({
     *   data: {
     *     // ... data to create a Photo
     *   }
     * })
     * 
    **/
    create<T extends PhotoCreateArgs>(
      args: Subset<T, PhotoCreateArgs>
    ): CheckSelect<T, Prisma__PhotoClient<Photo>, Prisma__PhotoClient<PhotoGetPayload<T>>>
    /**
     * Delete a Photo.
     * @param {PhotoDeleteArgs} args - Arguments to delete one Photo.
     * @example
     * // Delete one Photo
     * const Photo = await prisma.photo.delete({
     *   where: {
     *     // ... filter to delete one Photo
     *   }
     * })
     * 
    **/
    delete<T extends PhotoDeleteArgs>(
      args: Subset<T, PhotoDeleteArgs>
    ): CheckSelect<T, Prisma__PhotoClient<Photo>, Prisma__PhotoClient<PhotoGetPayload<T>>>
    /**
     * Update one Photo.
     * @param {PhotoUpdateArgs} args - Arguments to update one Photo.
     * @example
     * // Update one Photo
     * const photo = await prisma.photo.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PhotoUpdateArgs>(
      args: Subset<T, PhotoUpdateArgs>
    ): CheckSelect<T, Prisma__PhotoClient<Photo>, Prisma__PhotoClient<PhotoGetPayload<T>>>
    /**
     * Delete zero or more Photos.
     * @param {PhotoDeleteManyArgs} args - Arguments to filter Photos to delete.
     * @example
     * // Delete a few Photos
     * const { count } = await prisma.photo.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PhotoDeleteManyArgs>(
      args?: Subset<T, PhotoDeleteManyArgs>
    ): Promise<BatchPayload>
    /**
     * Update zero or more Photos.
     * @param {PhotoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Photos
     * const photo = await prisma.photo.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PhotoUpdateManyArgs>(
      args: Subset<T, PhotoUpdateManyArgs>
    ): Promise<BatchPayload>
    /**
     * Create or update one Photo.
     * @param {PhotoUpsertArgs} args - Arguments to update or create a Photo.
     * @example
     * // Update or create a Photo
     * const photo = await prisma.photo.upsert({
     *   create: {
     *     // ... data to create a Photo
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Photo we want to update
     *   }
     * })
    **/
    upsert<T extends PhotoUpsertArgs>(
      args: Subset<T, PhotoUpsertArgs>
    ): CheckSelect<T, Prisma__PhotoClient<Photo>, Prisma__PhotoClient<PhotoGetPayload<T>>>
    /**
     * Find zero or one Photo that matches the filter.
     * @param {FindUniquePhotoArgs} args - Arguments to find a Photo
     * @deprecated This will be deprecated please use prisma.photo.findUnique
     * @example
     * // Get one Photo
     * const photo = await prisma.photo.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniquePhotoArgs>(
      args: Subset<T, FindUniquePhotoArgs>
    ): CheckSelect<T, Prisma__PhotoClient<Photo | null>, Prisma__PhotoClient<PhotoGetPayload<T> | null>>
    /**
     * Count
     */
    count(args?: Omit<FindManyPhotoArgs, 'select' | 'include'>): Promise<number>

  

    /**
     * Aggregate
     */
    aggregate<T extends AggregatePhotoArgs>(args: Subset<T, AggregatePhotoArgs>): Promise<GetPhotoAggregateType<T>>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Photo.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__PhotoClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    Photobook<T extends PhotobookArgs = {}>(args?: Subset<T, PhotobookArgs>): CheckSelect<T, Prisma__PhotobookClient<Photobook | null>, Prisma__PhotobookClient<PhotobookGetPayload<T> | null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Photo findUnique
   */
  export type FindUniquePhotoArgs = {
    /**
     * Select specific fields to fetch from the Photo
    **/
    select?: PhotoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: PhotoInclude | null
    /**
     * Filter, which Photo to fetch.
    **/
    where: PhotoWhereUniqueInput
  }


  /**
   * Photo findFirst
   */
  export type FindFirstPhotoArgs = {
    /**
     * Select specific fields to fetch from the Photo
    **/
    select?: PhotoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: PhotoInclude | null
    /**
     * Filter, which Photo to fetch.
    **/
    where?: PhotoWhereInput
    orderBy?: Enumerable<PhotoOrderByInput>
    cursor?: PhotoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<PhotoScalarFieldEnum>
  }


  /**
   * Photo findMany
   */
  export type FindManyPhotoArgs = {
    /**
     * Select specific fields to fetch from the Photo
    **/
    select?: PhotoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: PhotoInclude | null
    /**
     * Filter, which Photos to fetch.
    **/
    where?: PhotoWhereInput
    /**
     * Determine the order of the Photos to fetch.
    **/
    orderBy?: Enumerable<PhotoOrderByInput>
    /**
     * Sets the position for listing Photos.
    **/
    cursor?: PhotoWhereUniqueInput
    /**
     * The number of Photos to fetch. If negative number, it will take Photos before the `cursor`.
    **/
    take?: number
    /**
     * Skip the first `n` Photos.
    **/
    skip?: number
    distinct?: Enumerable<PhotoScalarFieldEnum>
  }


  /**
   * Photo create
   */
  export type PhotoCreateArgs = {
    /**
     * Select specific fields to fetch from the Photo
    **/
    select?: PhotoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: PhotoInclude | null
    /**
     * The data needed to create a Photo.
    **/
    data: PhotoCreateInput
  }


  /**
   * Photo update
   */
  export type PhotoUpdateArgs = {
    /**
     * Select specific fields to fetch from the Photo
    **/
    select?: PhotoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: PhotoInclude | null
    /**
     * The data needed to update a Photo.
    **/
    data: PhotoUpdateInput
    /**
     * Choose, which Photo to update.
    **/
    where: PhotoWhereUniqueInput
  }


  /**
   * Photo updateMany
   */
  export type PhotoUpdateManyArgs = {
    data: PhotoUpdateManyMutationInput
    where?: PhotoWhereInput
  }


  /**
   * Photo upsert
   */
  export type PhotoUpsertArgs = {
    /**
     * Select specific fields to fetch from the Photo
    **/
    select?: PhotoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: PhotoInclude | null
    /**
     * The filter to search for the Photo to update in case it exists.
    **/
    where: PhotoWhereUniqueInput
    /**
     * In case the Photo found by the `where` argument doesn't exist, create a new Photo with this data.
    **/
    create: PhotoCreateInput
    /**
     * In case the Photo was found with the provided `where` argument, update it with this data.
    **/
    update: PhotoUpdateInput
  }


  /**
   * Photo delete
   */
  export type PhotoDeleteArgs = {
    /**
     * Select specific fields to fetch from the Photo
    **/
    select?: PhotoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: PhotoInclude | null
    /**
     * Filter which Photo to delete.
    **/
    where: PhotoWhereUniqueInput
  }


  /**
   * Photo deleteMany
   */
  export type PhotoDeleteManyArgs = {
    where?: PhotoWhereInput
  }


  /**
   * Photo without action
   */
  export type PhotoArgs = {
    /**
     * Select specific fields to fetch from the Photo
    **/
    select?: PhotoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: PhotoInclude | null
  }



  /**
   * Model Comment
   */


  export type AggregateComment = {
    count: number | null
    min: CommentMinAggregateOutputType | null
    max: CommentMaxAggregateOutputType | null
  }

  export type CommentMinAggregateOutputType = {
    id: string | null
    body: string | null
    photobookId: string | null
    userId: string | null
    created_at: Date | null
  }

  export type CommentMaxAggregateOutputType = {
    id: string | null
    body: string | null
    photobookId: string | null
    userId: string | null
    created_at: Date | null
  }

  export type CommentCountAggregateOutputType = {
    id: number | null
    body: number | null
    photobookId: number | null
    userId: number | null
    created_at: number | null
    _all: number
  }


  export type CommentMinAggregateInputType = {
    id?: true
    body?: true
    photobookId?: true
    userId?: true
    created_at?: true
  }

  export type CommentMaxAggregateInputType = {
    id?: true
    body?: true
    photobookId?: true
    userId?: true
    created_at?: true
  }

  export type CommentCountAggregateInputType = {
    id?: true
    body?: true
    photobookId?: true
    userId?: true
    created_at?: true
    _all?: true
  }

  export type AggregateCommentArgs = {
    where?: CommentWhereInput
    orderBy?: Enumerable<CommentOrderByInput>
    cursor?: CommentWhereUniqueInput
    take?: number
    skip?: number
    count?: true
    min?: CommentMinAggregateInputType
    max?: CommentMaxAggregateInputType
  }

  export type GetCommentAggregateType<T extends AggregateCommentArgs> = {
    [P in keyof T]: P extends 'count' ? number : never
  }



    



  export type CommentSelect = {
    id?: boolean
    body?: boolean
    user?: boolean | UserArgs
    photobook?: boolean | PhotobookArgs
    photobookId?: boolean
    userId?: boolean
    likes?: boolean | FindManyLikeArgs
    created_at?: boolean
  }

  export type CommentInclude = {
    user?: boolean | UserArgs
    photobook?: boolean | PhotobookArgs
    likes?: boolean | FindManyLikeArgs
  }

  export type CommentGetPayload<
    S extends boolean | null | undefined | CommentArgs,
    U = keyof S
      > = S extends true
        ? Comment
    : S extends undefined
    ? never
    : S extends CommentArgs | FindManyCommentArgs
    ?'include' extends U
    ? Comment  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'user'
        ? UserGetPayload<S['include'][P]> | null :
        P extends 'photobook'
        ? PhotobookGetPayload<S['include'][P]> | null :
        P extends 'likes'
        ? Array < LikeGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Comment ?Comment [P]
  : 
          P extends 'user'
        ? UserGetPayload<S['select'][P]> | null :
        P extends 'photobook'
        ? PhotobookGetPayload<S['select'][P]> | null :
        P extends 'likes'
        ? Array < LikeGetPayload<S['select'][P]>>  : never
  } 
    : Comment
  : Comment


  export interface CommentDelegate {
    /**
     * Find zero or one Comment that matches the filter.
     * @param {FindUniqueCommentArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniqueCommentArgs>(
      args: Subset<T, FindUniqueCommentArgs>
    ): CheckSelect<T, Prisma__CommentClient<Comment | null>, Prisma__CommentClient<CommentGetPayload<T> | null>>
    /**
     * Find the first Comment that matches the filter.
     * @param {FindFirstCommentArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirstCommentArgs>(
      args?: Subset<T, FindFirstCommentArgs>
    ): CheckSelect<T, Prisma__CommentClient<Comment | null>, Prisma__CommentClient<CommentGetPayload<T> | null>>
    /**
     * Find zero or more Comments that matches the filter.
     * @param {FindManyCommentArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Comments
     * const comments = await prisma.comment.findMany()
     * 
     * // Get first 10 Comments
     * const comments = await prisma.comment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const commentWithIdOnly = await prisma.comment.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FindManyCommentArgs>(
      args?: Subset<T, FindManyCommentArgs>
    ): CheckSelect<T, Promise<Array<Comment>>, Promise<Array<CommentGetPayload<T>>>>
    /**
     * Create a Comment.
     * @param {CommentCreateArgs} args - Arguments to create a Comment.
     * @example
     * // Create one Comment
     * const Comment = await prisma.comment.create({
     *   data: {
     *     // ... data to create a Comment
     *   }
     * })
     * 
    **/
    create<T extends CommentCreateArgs>(
      args: Subset<T, CommentCreateArgs>
    ): CheckSelect<T, Prisma__CommentClient<Comment>, Prisma__CommentClient<CommentGetPayload<T>>>
    /**
     * Delete a Comment.
     * @param {CommentDeleteArgs} args - Arguments to delete one Comment.
     * @example
     * // Delete one Comment
     * const Comment = await prisma.comment.delete({
     *   where: {
     *     // ... filter to delete one Comment
     *   }
     * })
     * 
    **/
    delete<T extends CommentDeleteArgs>(
      args: Subset<T, CommentDeleteArgs>
    ): CheckSelect<T, Prisma__CommentClient<Comment>, Prisma__CommentClient<CommentGetPayload<T>>>
    /**
     * Update one Comment.
     * @param {CommentUpdateArgs} args - Arguments to update one Comment.
     * @example
     * // Update one Comment
     * const comment = await prisma.comment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CommentUpdateArgs>(
      args: Subset<T, CommentUpdateArgs>
    ): CheckSelect<T, Prisma__CommentClient<Comment>, Prisma__CommentClient<CommentGetPayload<T>>>
    /**
     * Delete zero or more Comments.
     * @param {CommentDeleteManyArgs} args - Arguments to filter Comments to delete.
     * @example
     * // Delete a few Comments
     * const { count } = await prisma.comment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CommentDeleteManyArgs>(
      args?: Subset<T, CommentDeleteManyArgs>
    ): Promise<BatchPayload>
    /**
     * Update zero or more Comments.
     * @param {CommentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Comments
     * const comment = await prisma.comment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CommentUpdateManyArgs>(
      args: Subset<T, CommentUpdateManyArgs>
    ): Promise<BatchPayload>
    /**
     * Create or update one Comment.
     * @param {CommentUpsertArgs} args - Arguments to update or create a Comment.
     * @example
     * // Update or create a Comment
     * const comment = await prisma.comment.upsert({
     *   create: {
     *     // ... data to create a Comment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Comment we want to update
     *   }
     * })
    **/
    upsert<T extends CommentUpsertArgs>(
      args: Subset<T, CommentUpsertArgs>
    ): CheckSelect<T, Prisma__CommentClient<Comment>, Prisma__CommentClient<CommentGetPayload<T>>>
    /**
     * Find zero or one Comment that matches the filter.
     * @param {FindUniqueCommentArgs} args - Arguments to find a Comment
     * @deprecated This will be deprecated please use prisma.comment.findUnique
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniqueCommentArgs>(
      args: Subset<T, FindUniqueCommentArgs>
    ): CheckSelect<T, Prisma__CommentClient<Comment | null>, Prisma__CommentClient<CommentGetPayload<T> | null>>
    /**
     * Count
     */
    count(args?: Omit<FindManyCommentArgs, 'select' | 'include'>): Promise<number>

  

    /**
     * Aggregate
     */
    aggregate<T extends AggregateCommentArgs>(args: Subset<T, AggregateCommentArgs>): Promise<GetCommentAggregateType<T>>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Comment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CommentClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    user<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null>, Prisma__UserClient<UserGetPayload<T> | null>>;

    photobook<T extends PhotobookArgs = {}>(args?: Subset<T, PhotobookArgs>): CheckSelect<T, Prisma__PhotobookClient<Photobook | null>, Prisma__PhotobookClient<PhotobookGetPayload<T> | null>>;

    likes<T extends FindManyLikeArgs = {}>(args?: Subset<T, FindManyLikeArgs>): CheckSelect<T, Promise<Array<Like>>, Promise<Array<LikeGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Comment findUnique
   */
  export type FindUniqueCommentArgs = {
    /**
     * Select specific fields to fetch from the Comment
    **/
    select?: CommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: CommentInclude | null
    /**
     * Filter, which Comment to fetch.
    **/
    where: CommentWhereUniqueInput
  }


  /**
   * Comment findFirst
   */
  export type FindFirstCommentArgs = {
    /**
     * Select specific fields to fetch from the Comment
    **/
    select?: CommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: CommentInclude | null
    /**
     * Filter, which Comment to fetch.
    **/
    where?: CommentWhereInput
    orderBy?: Enumerable<CommentOrderByInput>
    cursor?: CommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<CommentScalarFieldEnum>
  }


  /**
   * Comment findMany
   */
  export type FindManyCommentArgs = {
    /**
     * Select specific fields to fetch from the Comment
    **/
    select?: CommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: CommentInclude | null
    /**
     * Filter, which Comments to fetch.
    **/
    where?: CommentWhereInput
    /**
     * Determine the order of the Comments to fetch.
    **/
    orderBy?: Enumerable<CommentOrderByInput>
    /**
     * Sets the position for listing Comments.
    **/
    cursor?: CommentWhereUniqueInput
    /**
     * The number of Comments to fetch. If negative number, it will take Comments before the `cursor`.
    **/
    take?: number
    /**
     * Skip the first `n` Comments.
    **/
    skip?: number
    distinct?: Enumerable<CommentScalarFieldEnum>
  }


  /**
   * Comment create
   */
  export type CommentCreateArgs = {
    /**
     * Select specific fields to fetch from the Comment
    **/
    select?: CommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: CommentInclude | null
    /**
     * The data needed to create a Comment.
    **/
    data: CommentCreateInput
  }


  /**
   * Comment update
   */
  export type CommentUpdateArgs = {
    /**
     * Select specific fields to fetch from the Comment
    **/
    select?: CommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: CommentInclude | null
    /**
     * The data needed to update a Comment.
    **/
    data: CommentUpdateInput
    /**
     * Choose, which Comment to update.
    **/
    where: CommentWhereUniqueInput
  }


  /**
   * Comment updateMany
   */
  export type CommentUpdateManyArgs = {
    data: CommentUpdateManyMutationInput
    where?: CommentWhereInput
  }


  /**
   * Comment upsert
   */
  export type CommentUpsertArgs = {
    /**
     * Select specific fields to fetch from the Comment
    **/
    select?: CommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: CommentInclude | null
    /**
     * The filter to search for the Comment to update in case it exists.
    **/
    where: CommentWhereUniqueInput
    /**
     * In case the Comment found by the `where` argument doesn't exist, create a new Comment with this data.
    **/
    create: CommentCreateInput
    /**
     * In case the Comment was found with the provided `where` argument, update it with this data.
    **/
    update: CommentUpdateInput
  }


  /**
   * Comment delete
   */
  export type CommentDeleteArgs = {
    /**
     * Select specific fields to fetch from the Comment
    **/
    select?: CommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: CommentInclude | null
    /**
     * Filter which Comment to delete.
    **/
    where: CommentWhereUniqueInput
  }


  /**
   * Comment deleteMany
   */
  export type CommentDeleteManyArgs = {
    where?: CommentWhereInput
  }


  /**
   * Comment without action
   */
  export type CommentArgs = {
    /**
     * Select specific fields to fetch from the Comment
    **/
    select?: CommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: CommentInclude | null
  }



  /**
   * Model Like
   */


  export type AggregateLike = {
    count: number | null
    min: LikeMinAggregateOutputType | null
    max: LikeMaxAggregateOutputType | null
  }

  export type LikeMinAggregateOutputType = {
    id: string | null
    userId: string | null
    photobookId: string | null
    commentId: string | null
    created_at: Date | null
  }

  export type LikeMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    photobookId: string | null
    commentId: string | null
    created_at: Date | null
  }

  export type LikeCountAggregateOutputType = {
    id: number | null
    userId: number | null
    photobookId: number | null
    commentId: number | null
    created_at: number | null
    _all: number
  }


  export type LikeMinAggregateInputType = {
    id?: true
    userId?: true
    photobookId?: true
    commentId?: true
    created_at?: true
  }

  export type LikeMaxAggregateInputType = {
    id?: true
    userId?: true
    photobookId?: true
    commentId?: true
    created_at?: true
  }

  export type LikeCountAggregateInputType = {
    id?: true
    userId?: true
    photobookId?: true
    commentId?: true
    created_at?: true
    _all?: true
  }

  export type AggregateLikeArgs = {
    where?: LikeWhereInput
    orderBy?: Enumerable<LikeOrderByInput>
    cursor?: LikeWhereUniqueInput
    take?: number
    skip?: number
    count?: true
    min?: LikeMinAggregateInputType
    max?: LikeMaxAggregateInputType
  }

  export type GetLikeAggregateType<T extends AggregateLikeArgs> = {
    [P in keyof T]: P extends 'count' ? number : never
  }



    



  export type LikeSelect = {
    id?: boolean
    user?: boolean | UserArgs
    userId?: boolean
    photobook?: boolean | PhotobookArgs
    photobookId?: boolean
    comment?: boolean | CommentArgs
    commentId?: boolean
    created_at?: boolean
  }

  export type LikeInclude = {
    user?: boolean | UserArgs
    photobook?: boolean | PhotobookArgs
    comment?: boolean | CommentArgs
  }

  export type LikeGetPayload<
    S extends boolean | null | undefined | LikeArgs,
    U = keyof S
      > = S extends true
        ? Like
    : S extends undefined
    ? never
    : S extends LikeArgs | FindManyLikeArgs
    ?'include' extends U
    ? Like  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'user'
        ? UserGetPayload<S['include'][P]> | null :
        P extends 'photobook'
        ? PhotobookGetPayload<S['include'][P]> | null :
        P extends 'comment'
        ? CommentGetPayload<S['include'][P]> | null : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Like ?Like [P]
  : 
          P extends 'user'
        ? UserGetPayload<S['select'][P]> | null :
        P extends 'photobook'
        ? PhotobookGetPayload<S['select'][P]> | null :
        P extends 'comment'
        ? CommentGetPayload<S['select'][P]> | null : never
  } 
    : Like
  : Like


  export interface LikeDelegate {
    /**
     * Find zero or one Like that matches the filter.
     * @param {FindUniqueLikeArgs} args - Arguments to find a Like
     * @example
     * // Get one Like
     * const like = await prisma.like.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniqueLikeArgs>(
      args: Subset<T, FindUniqueLikeArgs>
    ): CheckSelect<T, Prisma__LikeClient<Like | null>, Prisma__LikeClient<LikeGetPayload<T> | null>>
    /**
     * Find the first Like that matches the filter.
     * @param {FindFirstLikeArgs} args - Arguments to find a Like
     * @example
     * // Get one Like
     * const like = await prisma.like.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirstLikeArgs>(
      args?: Subset<T, FindFirstLikeArgs>
    ): CheckSelect<T, Prisma__LikeClient<Like | null>, Prisma__LikeClient<LikeGetPayload<T> | null>>
    /**
     * Find zero or more Likes that matches the filter.
     * @param {FindManyLikeArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Likes
     * const likes = await prisma.like.findMany()
     * 
     * // Get first 10 Likes
     * const likes = await prisma.like.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const likeWithIdOnly = await prisma.like.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FindManyLikeArgs>(
      args?: Subset<T, FindManyLikeArgs>
    ): CheckSelect<T, Promise<Array<Like>>, Promise<Array<LikeGetPayload<T>>>>
    /**
     * Create a Like.
     * @param {LikeCreateArgs} args - Arguments to create a Like.
     * @example
     * // Create one Like
     * const Like = await prisma.like.create({
     *   data: {
     *     // ... data to create a Like
     *   }
     * })
     * 
    **/
    create<T extends LikeCreateArgs>(
      args: Subset<T, LikeCreateArgs>
    ): CheckSelect<T, Prisma__LikeClient<Like>, Prisma__LikeClient<LikeGetPayload<T>>>
    /**
     * Delete a Like.
     * @param {LikeDeleteArgs} args - Arguments to delete one Like.
     * @example
     * // Delete one Like
     * const Like = await prisma.like.delete({
     *   where: {
     *     // ... filter to delete one Like
     *   }
     * })
     * 
    **/
    delete<T extends LikeDeleteArgs>(
      args: Subset<T, LikeDeleteArgs>
    ): CheckSelect<T, Prisma__LikeClient<Like>, Prisma__LikeClient<LikeGetPayload<T>>>
    /**
     * Update one Like.
     * @param {LikeUpdateArgs} args - Arguments to update one Like.
     * @example
     * // Update one Like
     * const like = await prisma.like.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends LikeUpdateArgs>(
      args: Subset<T, LikeUpdateArgs>
    ): CheckSelect<T, Prisma__LikeClient<Like>, Prisma__LikeClient<LikeGetPayload<T>>>
    /**
     * Delete zero or more Likes.
     * @param {LikeDeleteManyArgs} args - Arguments to filter Likes to delete.
     * @example
     * // Delete a few Likes
     * const { count } = await prisma.like.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends LikeDeleteManyArgs>(
      args?: Subset<T, LikeDeleteManyArgs>
    ): Promise<BatchPayload>
    /**
     * Update zero or more Likes.
     * @param {LikeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Likes
     * const like = await prisma.like.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends LikeUpdateManyArgs>(
      args: Subset<T, LikeUpdateManyArgs>
    ): Promise<BatchPayload>
    /**
     * Create or update one Like.
     * @param {LikeUpsertArgs} args - Arguments to update or create a Like.
     * @example
     * // Update or create a Like
     * const like = await prisma.like.upsert({
     *   create: {
     *     // ... data to create a Like
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Like we want to update
     *   }
     * })
    **/
    upsert<T extends LikeUpsertArgs>(
      args: Subset<T, LikeUpsertArgs>
    ): CheckSelect<T, Prisma__LikeClient<Like>, Prisma__LikeClient<LikeGetPayload<T>>>
    /**
     * Find zero or one Like that matches the filter.
     * @param {FindUniqueLikeArgs} args - Arguments to find a Like
     * @deprecated This will be deprecated please use prisma.like.findUnique
     * @example
     * // Get one Like
     * const like = await prisma.like.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniqueLikeArgs>(
      args: Subset<T, FindUniqueLikeArgs>
    ): CheckSelect<T, Prisma__LikeClient<Like | null>, Prisma__LikeClient<LikeGetPayload<T> | null>>
    /**
     * Count
     */
    count(args?: Omit<FindManyLikeArgs, 'select' | 'include'>): Promise<number>

  

    /**
     * Aggregate
     */
    aggregate<T extends AggregateLikeArgs>(args: Subset<T, AggregateLikeArgs>): Promise<GetLikeAggregateType<T>>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Like.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__LikeClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    user<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null>, Prisma__UserClient<UserGetPayload<T> | null>>;

    photobook<T extends PhotobookArgs = {}>(args?: Subset<T, PhotobookArgs>): CheckSelect<T, Prisma__PhotobookClient<Photobook | null>, Prisma__PhotobookClient<PhotobookGetPayload<T> | null>>;

    comment<T extends CommentArgs = {}>(args?: Subset<T, CommentArgs>): CheckSelect<T, Prisma__CommentClient<Comment | null>, Prisma__CommentClient<CommentGetPayload<T> | null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Like findUnique
   */
  export type FindUniqueLikeArgs = {
    /**
     * Select specific fields to fetch from the Like
    **/
    select?: LikeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: LikeInclude | null
    /**
     * Filter, which Like to fetch.
    **/
    where: LikeWhereUniqueInput
  }


  /**
   * Like findFirst
   */
  export type FindFirstLikeArgs = {
    /**
     * Select specific fields to fetch from the Like
    **/
    select?: LikeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: LikeInclude | null
    /**
     * Filter, which Like to fetch.
    **/
    where?: LikeWhereInput
    orderBy?: Enumerable<LikeOrderByInput>
    cursor?: LikeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<LikeScalarFieldEnum>
  }


  /**
   * Like findMany
   */
  export type FindManyLikeArgs = {
    /**
     * Select specific fields to fetch from the Like
    **/
    select?: LikeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: LikeInclude | null
    /**
     * Filter, which Likes to fetch.
    **/
    where?: LikeWhereInput
    /**
     * Determine the order of the Likes to fetch.
    **/
    orderBy?: Enumerable<LikeOrderByInput>
    /**
     * Sets the position for listing Likes.
    **/
    cursor?: LikeWhereUniqueInput
    /**
     * The number of Likes to fetch. If negative number, it will take Likes before the `cursor`.
    **/
    take?: number
    /**
     * Skip the first `n` Likes.
    **/
    skip?: number
    distinct?: Enumerable<LikeScalarFieldEnum>
  }


  /**
   * Like create
   */
  export type LikeCreateArgs = {
    /**
     * Select specific fields to fetch from the Like
    **/
    select?: LikeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: LikeInclude | null
    /**
     * The data needed to create a Like.
    **/
    data: LikeCreateInput
  }


  /**
   * Like update
   */
  export type LikeUpdateArgs = {
    /**
     * Select specific fields to fetch from the Like
    **/
    select?: LikeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: LikeInclude | null
    /**
     * The data needed to update a Like.
    **/
    data: LikeUpdateInput
    /**
     * Choose, which Like to update.
    **/
    where: LikeWhereUniqueInput
  }


  /**
   * Like updateMany
   */
  export type LikeUpdateManyArgs = {
    data: LikeUpdateManyMutationInput
    where?: LikeWhereInput
  }


  /**
   * Like upsert
   */
  export type LikeUpsertArgs = {
    /**
     * Select specific fields to fetch from the Like
    **/
    select?: LikeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: LikeInclude | null
    /**
     * The filter to search for the Like to update in case it exists.
    **/
    where: LikeWhereUniqueInput
    /**
     * In case the Like found by the `where` argument doesn't exist, create a new Like with this data.
    **/
    create: LikeCreateInput
    /**
     * In case the Like was found with the provided `where` argument, update it with this data.
    **/
    update: LikeUpdateInput
  }


  /**
   * Like delete
   */
  export type LikeDeleteArgs = {
    /**
     * Select specific fields to fetch from the Like
    **/
    select?: LikeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: LikeInclude | null
    /**
     * Filter which Like to delete.
    **/
    where: LikeWhereUniqueInput
  }


  /**
   * Like deleteMany
   */
  export type LikeDeleteManyArgs = {
    where?: LikeWhereInput
  }


  /**
   * Like without action
   */
  export type LikeArgs = {
    /**
     * Select specific fields to fetch from the Like
    **/
    select?: LikeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: LikeInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    username: 'username',
    password: 'password',
    confirmed: 'confirmed',
    created_at: 'created_at'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const PhotobookScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    created_at: 'created_at',
    likesCount: 'likesCount',
    commentsCount: 'commentsCount',
    cover_image_id: 'cover_image_id',
    cover_text: 'cover_text'
  };

  export type PhotobookScalarFieldEnum = (typeof PhotobookScalarFieldEnum)[keyof typeof PhotobookScalarFieldEnum]


  export const PhotoScalarFieldEnum: {
    id: 'id',
    img_id: 'img_id',
    text_data: 'text_data',
    photobookId: 'photobookId',
    created_at: 'created_at'
  };

  export type PhotoScalarFieldEnum = (typeof PhotoScalarFieldEnum)[keyof typeof PhotoScalarFieldEnum]


  export const CommentScalarFieldEnum: {
    id: 'id',
    body: 'body',
    photobookId: 'photobookId',
    userId: 'userId',
    created_at: 'created_at'
  };

  export type CommentScalarFieldEnum = (typeof CommentScalarFieldEnum)[keyof typeof CommentScalarFieldEnum]


  export const LikeScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    photobookId: 'photobookId',
    commentId: 'commentId',
    created_at: 'created_at'
  };

  export type LikeScalarFieldEnum = (typeof LikeScalarFieldEnum)[keyof typeof LikeScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    id?: StringFilter | string
    email?: StringFilter | string
    username?: StringFilter | string
    password?: StringFilter | string
    confirmed?: BoolFilter | boolean
    created_at?: DateTimeFilter | Date | string
    photobooks?: PhotobookListRelationFilter
    comments?: CommentListRelationFilter
    Like?: LikeListRelationFilter
  }

  export type UserOrderByInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrder
    password?: SortOrder
    confirmed?: SortOrder
    created_at?: SortOrder
  }

  export type UserWhereUniqueInput = {
    id?: string
    email?: string
  }

  export type PhotobookWhereInput = {
    AND?: Enumerable<PhotobookWhereInput>
    OR?: Enumerable<PhotobookWhereInput>
    NOT?: Enumerable<PhotobookWhereInput>
    id?: StringFilter | string
    user?: XOR<UserWhereInput, UserRelationFilter> | null
    userId?: StringNullableFilter | string | null
    photos?: PhotoListRelationFilter
    created_at?: DateTimeFilter | Date | string
    likesCount?: IntFilter | number
    commentsCount?: IntFilter | number
    cover_image_id?: StringFilter | string
    cover_text?: StringFilter | string
    comments?: CommentListRelationFilter
    likes?: LikeListRelationFilter
  }

  export type PhotobookOrderByInput = {
    id?: SortOrder
    userId?: SortOrder
    created_at?: SortOrder
    likesCount?: SortOrder
    commentsCount?: SortOrder
    cover_image_id?: SortOrder
    cover_text?: SortOrder
  }

  export type PhotobookWhereUniqueInput = {
    id?: string
  }

  export type PhotoWhereInput = {
    AND?: Enumerable<PhotoWhereInput>
    OR?: Enumerable<PhotoWhereInput>
    NOT?: Enumerable<PhotoWhereInput>
    id?: StringFilter | string
    img_id?: StringFilter | string
    text_data?: StringFilter | string
    Photobook?: XOR<PhotobookWhereInput, PhotobookRelationFilter> | null
    photobookId?: StringNullableFilter | string | null
    created_at?: DateTimeFilter | Date | string
  }

  export type PhotoOrderByInput = {
    id?: SortOrder
    img_id?: SortOrder
    text_data?: SortOrder
    photobookId?: SortOrder
    created_at?: SortOrder
  }

  export type PhotoWhereUniqueInput = {
    id?: string
  }

  export type CommentWhereInput = {
    AND?: Enumerable<CommentWhereInput>
    OR?: Enumerable<CommentWhereInput>
    NOT?: Enumerable<CommentWhereInput>
    id?: StringFilter | string
    body?: StringFilter | string
    user?: XOR<UserWhereInput, UserRelationFilter> | null
    photobook?: XOR<PhotobookWhereInput, PhotobookRelationFilter> | null
    photobookId?: StringNullableFilter | string | null
    userId?: StringNullableFilter | string | null
    likes?: LikeListRelationFilter
    created_at?: DateTimeFilter | Date | string
  }

  export type CommentOrderByInput = {
    id?: SortOrder
    body?: SortOrder
    photobookId?: SortOrder
    userId?: SortOrder
    created_at?: SortOrder
  }

  export type CommentWhereUniqueInput = {
    id?: string
  }

  export type LikeWhereInput = {
    AND?: Enumerable<LikeWhereInput>
    OR?: Enumerable<LikeWhereInput>
    NOT?: Enumerable<LikeWhereInput>
    id?: StringFilter | string
    user?: XOR<UserWhereInput, UserRelationFilter> | null
    userId?: StringNullableFilter | string | null
    photobook?: XOR<PhotobookWhereInput, PhotobookRelationFilter> | null
    photobookId?: StringNullableFilter | string | null
    comment?: XOR<CommentWhereInput, CommentRelationFilter> | null
    commentId?: StringNullableFilter | string | null
    created_at?: DateTimeFilter | Date | string
  }

  export type LikeOrderByInput = {
    id?: SortOrder
    userId?: SortOrder
    photobookId?: SortOrder
    commentId?: SortOrder
    created_at?: SortOrder
  }

  export type LikeWhereUniqueInput = {
    id?: string
    photobook_liked?: Photobook_likedCompoundUniqueInput
    comment_liked?: Comment_likedCompoundUniqueInput
  }

  export type UserCreateInput = {
    id?: string
    email: string
    username: string
    password: string
    confirmed?: boolean
    created_at?: Date | string
    photobooks?: PhotobookCreateManyWithoutUserInput
    comments?: CommentCreateManyWithoutUserInput
    Like?: LikeCreateManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    confirmed?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    photobooks?: PhotobookUpdateManyWithoutUserInput
    comments?: CommentUpdateManyWithoutUserInput
    Like?: LikeUpdateManyWithoutUserInput
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    confirmed?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PhotobookCreateInput = {
    id?: string
    created_at?: Date | string
    likesCount?: number
    commentsCount?: number
    cover_image_id?: string
    cover_text?: string
    user?: UserCreateOneWithoutPhotobooksInput
    photos?: PhotoCreateManyWithoutPhotobookInput
    comments?: CommentCreateManyWithoutPhotobookInput
    likes?: LikeCreateManyWithoutPhotobookInput
  }

  export type PhotobookUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    likesCount?: IntFieldUpdateOperationsInput | number
    commentsCount?: IntFieldUpdateOperationsInput | number
    cover_image_id?: StringFieldUpdateOperationsInput | string
    cover_text?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneWithoutPhotobooksInput
    photos?: PhotoUpdateManyWithoutPhotobookInput
    comments?: CommentUpdateManyWithoutPhotobookInput
    likes?: LikeUpdateManyWithoutPhotobookInput
  }

  export type PhotobookUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    likesCount?: IntFieldUpdateOperationsInput | number
    commentsCount?: IntFieldUpdateOperationsInput | number
    cover_image_id?: StringFieldUpdateOperationsInput | string
    cover_text?: StringFieldUpdateOperationsInput | string
  }

  export type PhotoCreateInput = {
    id?: string
    img_id: string
    text_data?: string
    created_at?: Date | string
    Photobook?: PhotobookCreateOneWithoutPhotosInput
  }

  export type PhotoUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    img_id?: StringFieldUpdateOperationsInput | string
    text_data?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    Photobook?: PhotobookUpdateOneWithoutPhotosInput
  }

  export type PhotoUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    img_id?: StringFieldUpdateOperationsInput | string
    text_data?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentCreateInput = {
    id?: string
    body: string
    created_at?: Date | string
    user?: UserCreateOneWithoutCommentsInput
    photobook?: PhotobookCreateOneWithoutCommentsInput
    likes?: LikeCreateManyWithoutCommentInput
  }

  export type CommentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    body?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutCommentsInput
    photobook?: PhotobookUpdateOneWithoutCommentsInput
    likes?: LikeUpdateManyWithoutCommentInput
  }

  export type CommentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    body?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LikeCreateInput = {
    id?: string
    created_at?: Date | string
    user?: UserCreateOneWithoutLikeInput
    photobook?: PhotobookCreateOneWithoutLikesInput
    comment?: CommentCreateOneWithoutLikesInput
  }

  export type LikeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutLikeInput
    photobook?: PhotobookUpdateOneWithoutLikesInput
    comment?: CommentUpdateOneWithoutLikesInput
  }

  export type LikeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type PhotobookListRelationFilter = {
    every?: PhotobookWhereInput
    some?: PhotobookWhereInput
    none?: PhotobookWhereInput
  }

  export type CommentListRelationFilter = {
    every?: CommentWhereInput
    some?: CommentWhereInput
    none?: CommentWhereInput
  }

  export type LikeListRelationFilter = {
    every?: LikeWhereInput
    some?: LikeWhereInput
    none?: LikeWhereInput
  }

  export type UserRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }

  export type PhotoListRelationFilter = {
    every?: PhotoWhereInput
    some?: PhotoWhereInput
    none?: PhotoWhereInput
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type PhotobookRelationFilter = {
    is?: PhotobookWhereInput | null
    isNot?: PhotobookWhereInput | null
  }

  export type CommentRelationFilter = {
    is?: CommentWhereInput | null
    isNot?: CommentWhereInput | null
  }

  export type Photobook_likedCompoundUniqueInput = {
    userId: string
    photobookId: string
  }

  export type Comment_likedCompoundUniqueInput = {
    userId: string
    commentId: string
  }

  export type PhotobookCreateManyWithoutUserInput = {
    create?: Enumerable<PhotobookCreateWithoutUserInput>
    connect?: Enumerable<PhotobookWhereUniqueInput>
    connectOrCreate?: Enumerable<PhotobookCreateOrConnectWithoutuserInput>
  }

  export type CommentCreateManyWithoutUserInput = {
    create?: Enumerable<CommentCreateWithoutUserInput>
    connect?: Enumerable<CommentWhereUniqueInput>
    connectOrCreate?: Enumerable<CommentCreateOrConnectWithoutuserInput>
  }

  export type LikeCreateManyWithoutUserInput = {
    create?: Enumerable<LikeCreateWithoutUserInput>
    connect?: Enumerable<LikeWhereUniqueInput>
    connectOrCreate?: Enumerable<LikeCreateOrConnectWithoutuserInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type PhotobookUpdateManyWithoutUserInput = {
    create?: Enumerable<PhotobookCreateWithoutUserInput>
    connect?: Enumerable<PhotobookWhereUniqueInput>
    set?: Enumerable<PhotobookWhereUniqueInput>
    disconnect?: Enumerable<PhotobookWhereUniqueInput>
    delete?: Enumerable<PhotobookWhereUniqueInput>
    update?: Enumerable<PhotobookUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<PhotobookUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<PhotobookScalarWhereInput>
    upsert?: Enumerable<PhotobookUpsertWithWhereUniqueWithoutUserInput>
    connectOrCreate?: Enumerable<PhotobookCreateOrConnectWithoutuserInput>
  }

  export type CommentUpdateManyWithoutUserInput = {
    create?: Enumerable<CommentCreateWithoutUserInput>
    connect?: Enumerable<CommentWhereUniqueInput>
    set?: Enumerable<CommentWhereUniqueInput>
    disconnect?: Enumerable<CommentWhereUniqueInput>
    delete?: Enumerable<CommentWhereUniqueInput>
    update?: Enumerable<CommentUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<CommentUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<CommentScalarWhereInput>
    upsert?: Enumerable<CommentUpsertWithWhereUniqueWithoutUserInput>
    connectOrCreate?: Enumerable<CommentCreateOrConnectWithoutuserInput>
  }

  export type LikeUpdateManyWithoutUserInput = {
    create?: Enumerable<LikeCreateWithoutUserInput>
    connect?: Enumerable<LikeWhereUniqueInput>
    set?: Enumerable<LikeWhereUniqueInput>
    disconnect?: Enumerable<LikeWhereUniqueInput>
    delete?: Enumerable<LikeWhereUniqueInput>
    update?: Enumerable<LikeUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<LikeUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<LikeScalarWhereInput>
    upsert?: Enumerable<LikeUpsertWithWhereUniqueWithoutUserInput>
    connectOrCreate?: Enumerable<LikeCreateOrConnectWithoutuserInput>
  }

  export type UserCreateOneWithoutPhotobooksInput = {
    create?: UserCreateWithoutPhotobooksInput
    connect?: UserWhereUniqueInput
    connectOrCreate?: UserCreateOrConnectWithoutphotobooksInput
  }

  export type PhotoCreateManyWithoutPhotobookInput = {
    create?: Enumerable<PhotoCreateWithoutPhotobookInput>
    connect?: Enumerable<PhotoWhereUniqueInput>
    connectOrCreate?: Enumerable<PhotoCreateOrConnectWithoutPhotobookInput>
  }

  export type CommentCreateManyWithoutPhotobookInput = {
    create?: Enumerable<CommentCreateWithoutPhotobookInput>
    connect?: Enumerable<CommentWhereUniqueInput>
    connectOrCreate?: Enumerable<CommentCreateOrConnectWithoutphotobookInput>
  }

  export type LikeCreateManyWithoutPhotobookInput = {
    create?: Enumerable<LikeCreateWithoutPhotobookInput>
    connect?: Enumerable<LikeWhereUniqueInput>
    connectOrCreate?: Enumerable<LikeCreateOrConnectWithoutphotobookInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneWithoutPhotobooksInput = {
    create?: UserCreateWithoutPhotobooksInput
    connect?: UserWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: UserUpdateWithoutPhotobooksInput
    upsert?: UserUpsertWithoutPhotobooksInput
    connectOrCreate?: UserCreateOrConnectWithoutphotobooksInput
  }

  export type PhotoUpdateManyWithoutPhotobookInput = {
    create?: Enumerable<PhotoCreateWithoutPhotobookInput>
    connect?: Enumerable<PhotoWhereUniqueInput>
    set?: Enumerable<PhotoWhereUniqueInput>
    disconnect?: Enumerable<PhotoWhereUniqueInput>
    delete?: Enumerable<PhotoWhereUniqueInput>
    update?: Enumerable<PhotoUpdateWithWhereUniqueWithoutPhotobookInput>
    updateMany?: Enumerable<PhotoUpdateManyWithWhereWithoutPhotobookInput>
    deleteMany?: Enumerable<PhotoScalarWhereInput>
    upsert?: Enumerable<PhotoUpsertWithWhereUniqueWithoutPhotobookInput>
    connectOrCreate?: Enumerable<PhotoCreateOrConnectWithoutPhotobookInput>
  }

  export type CommentUpdateManyWithoutPhotobookInput = {
    create?: Enumerable<CommentCreateWithoutPhotobookInput>
    connect?: Enumerable<CommentWhereUniqueInput>
    set?: Enumerable<CommentWhereUniqueInput>
    disconnect?: Enumerable<CommentWhereUniqueInput>
    delete?: Enumerable<CommentWhereUniqueInput>
    update?: Enumerable<CommentUpdateWithWhereUniqueWithoutPhotobookInput>
    updateMany?: Enumerable<CommentUpdateManyWithWhereWithoutPhotobookInput>
    deleteMany?: Enumerable<CommentScalarWhereInput>
    upsert?: Enumerable<CommentUpsertWithWhereUniqueWithoutPhotobookInput>
    connectOrCreate?: Enumerable<CommentCreateOrConnectWithoutphotobookInput>
  }

  export type LikeUpdateManyWithoutPhotobookInput = {
    create?: Enumerable<LikeCreateWithoutPhotobookInput>
    connect?: Enumerable<LikeWhereUniqueInput>
    set?: Enumerable<LikeWhereUniqueInput>
    disconnect?: Enumerable<LikeWhereUniqueInput>
    delete?: Enumerable<LikeWhereUniqueInput>
    update?: Enumerable<LikeUpdateWithWhereUniqueWithoutPhotobookInput>
    updateMany?: Enumerable<LikeUpdateManyWithWhereWithoutPhotobookInput>
    deleteMany?: Enumerable<LikeScalarWhereInput>
    upsert?: Enumerable<LikeUpsertWithWhereUniqueWithoutPhotobookInput>
    connectOrCreate?: Enumerable<LikeCreateOrConnectWithoutphotobookInput>
  }

  export type PhotobookCreateOneWithoutPhotosInput = {
    create?: PhotobookCreateWithoutPhotosInput
    connect?: PhotobookWhereUniqueInput
    connectOrCreate?: PhotobookCreateOrConnectWithoutphotosInput
  }

  export type PhotobookUpdateOneWithoutPhotosInput = {
    create?: PhotobookCreateWithoutPhotosInput
    connect?: PhotobookWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: PhotobookUpdateWithoutPhotosInput
    upsert?: PhotobookUpsertWithoutPhotosInput
    connectOrCreate?: PhotobookCreateOrConnectWithoutphotosInput
  }

  export type UserCreateOneWithoutCommentsInput = {
    create?: UserCreateWithoutCommentsInput
    connect?: UserWhereUniqueInput
    connectOrCreate?: UserCreateOrConnectWithoutcommentsInput
  }

  export type PhotobookCreateOneWithoutCommentsInput = {
    create?: PhotobookCreateWithoutCommentsInput
    connect?: PhotobookWhereUniqueInput
    connectOrCreate?: PhotobookCreateOrConnectWithoutcommentsInput
  }

  export type LikeCreateManyWithoutCommentInput = {
    create?: Enumerable<LikeCreateWithoutCommentInput>
    connect?: Enumerable<LikeWhereUniqueInput>
    connectOrCreate?: Enumerable<LikeCreateOrConnectWithoutcommentInput>
  }

  export type UserUpdateOneWithoutCommentsInput = {
    create?: UserCreateWithoutCommentsInput
    connect?: UserWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: UserUpdateWithoutCommentsInput
    upsert?: UserUpsertWithoutCommentsInput
    connectOrCreate?: UserCreateOrConnectWithoutcommentsInput
  }

  export type PhotobookUpdateOneWithoutCommentsInput = {
    create?: PhotobookCreateWithoutCommentsInput
    connect?: PhotobookWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: PhotobookUpdateWithoutCommentsInput
    upsert?: PhotobookUpsertWithoutCommentsInput
    connectOrCreate?: PhotobookCreateOrConnectWithoutcommentsInput
  }

  export type LikeUpdateManyWithoutCommentInput = {
    create?: Enumerable<LikeCreateWithoutCommentInput>
    connect?: Enumerable<LikeWhereUniqueInput>
    set?: Enumerable<LikeWhereUniqueInput>
    disconnect?: Enumerable<LikeWhereUniqueInput>
    delete?: Enumerable<LikeWhereUniqueInput>
    update?: Enumerable<LikeUpdateWithWhereUniqueWithoutCommentInput>
    updateMany?: Enumerable<LikeUpdateManyWithWhereWithoutCommentInput>
    deleteMany?: Enumerable<LikeScalarWhereInput>
    upsert?: Enumerable<LikeUpsertWithWhereUniqueWithoutCommentInput>
    connectOrCreate?: Enumerable<LikeCreateOrConnectWithoutcommentInput>
  }

  export type UserCreateOneWithoutLikeInput = {
    create?: UserCreateWithoutLikeInput
    connect?: UserWhereUniqueInput
    connectOrCreate?: UserCreateOrConnectWithoutLikeInput
  }

  export type PhotobookCreateOneWithoutLikesInput = {
    create?: PhotobookCreateWithoutLikesInput
    connect?: PhotobookWhereUniqueInput
    connectOrCreate?: PhotobookCreateOrConnectWithoutlikesInput
  }

  export type CommentCreateOneWithoutLikesInput = {
    create?: CommentCreateWithoutLikesInput
    connect?: CommentWhereUniqueInput
    connectOrCreate?: CommentCreateOrConnectWithoutlikesInput
  }

  export type UserUpdateOneWithoutLikeInput = {
    create?: UserCreateWithoutLikeInput
    connect?: UserWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: UserUpdateWithoutLikeInput
    upsert?: UserUpsertWithoutLikeInput
    connectOrCreate?: UserCreateOrConnectWithoutLikeInput
  }

  export type PhotobookUpdateOneWithoutLikesInput = {
    create?: PhotobookCreateWithoutLikesInput
    connect?: PhotobookWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: PhotobookUpdateWithoutLikesInput
    upsert?: PhotobookUpsertWithoutLikesInput
    connectOrCreate?: PhotobookCreateOrConnectWithoutlikesInput
  }

  export type CommentUpdateOneWithoutLikesInput = {
    create?: CommentCreateWithoutLikesInput
    connect?: CommentWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: CommentUpdateWithoutLikesInput
    upsert?: CommentUpsertWithoutLikesInput
    connectOrCreate?: CommentCreateOrConnectWithoutlikesInput
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type PhotobookCreateWithoutUserInput = {
    id?: string
    created_at?: Date | string
    likesCount?: number
    commentsCount?: number
    cover_image_id?: string
    cover_text?: string
    photos?: PhotoCreateManyWithoutPhotobookInput
    comments?: CommentCreateManyWithoutPhotobookInput
    likes?: LikeCreateManyWithoutPhotobookInput
  }

  export type PhotobookCreateOrConnectWithoutuserInput = {
    where: PhotobookWhereUniqueInput
    create: PhotobookCreateWithoutUserInput
  }

  export type CommentCreateWithoutUserInput = {
    id?: string
    body: string
    created_at?: Date | string
    photobook?: PhotobookCreateOneWithoutCommentsInput
    likes?: LikeCreateManyWithoutCommentInput
  }

  export type CommentCreateOrConnectWithoutuserInput = {
    where: CommentWhereUniqueInput
    create: CommentCreateWithoutUserInput
  }

  export type LikeCreateWithoutUserInput = {
    id?: string
    created_at?: Date | string
    photobook?: PhotobookCreateOneWithoutLikesInput
    comment?: CommentCreateOneWithoutLikesInput
  }

  export type LikeCreateOrConnectWithoutuserInput = {
    where: LikeWhereUniqueInput
    create: LikeCreateWithoutUserInput
  }

  export type PhotobookUpdateWithWhereUniqueWithoutUserInput = {
    where: PhotobookWhereUniqueInput
    data: PhotobookUpdateWithoutUserInput
  }

  export type PhotobookUpdateManyWithWhereWithoutUserInput = {
    where: PhotobookScalarWhereInput
    data: PhotobookUpdateManyMutationInput
  }

  export type PhotobookScalarWhereInput = {
    AND?: Enumerable<PhotobookScalarWhereInput>
    OR?: Enumerable<PhotobookScalarWhereInput>
    NOT?: Enumerable<PhotobookScalarWhereInput>
    id?: StringFilter | string
    userId?: StringNullableFilter | string | null
    created_at?: DateTimeFilter | Date | string
    likesCount?: IntFilter | number
    commentsCount?: IntFilter | number
    cover_image_id?: StringFilter | string
    cover_text?: StringFilter | string
  }

  export type PhotobookUpsertWithWhereUniqueWithoutUserInput = {
    where: PhotobookWhereUniqueInput
    update: PhotobookUpdateWithoutUserInput
    create: PhotobookCreateWithoutUserInput
  }

  export type CommentUpdateWithWhereUniqueWithoutUserInput = {
    where: CommentWhereUniqueInput
    data: CommentUpdateWithoutUserInput
  }

  export type CommentUpdateManyWithWhereWithoutUserInput = {
    where: CommentScalarWhereInput
    data: CommentUpdateManyMutationInput
  }

  export type CommentScalarWhereInput = {
    AND?: Enumerable<CommentScalarWhereInput>
    OR?: Enumerable<CommentScalarWhereInput>
    NOT?: Enumerable<CommentScalarWhereInput>
    id?: StringFilter | string
    body?: StringFilter | string
    photobookId?: StringNullableFilter | string | null
    userId?: StringNullableFilter | string | null
    created_at?: DateTimeFilter | Date | string
  }

  export type CommentUpsertWithWhereUniqueWithoutUserInput = {
    where: CommentWhereUniqueInput
    update: CommentUpdateWithoutUserInput
    create: CommentCreateWithoutUserInput
  }

  export type LikeUpdateWithWhereUniqueWithoutUserInput = {
    where: LikeWhereUniqueInput
    data: LikeUpdateWithoutUserInput
  }

  export type LikeUpdateManyWithWhereWithoutUserInput = {
    where: LikeScalarWhereInput
    data: LikeUpdateManyMutationInput
  }

  export type LikeScalarWhereInput = {
    AND?: Enumerable<LikeScalarWhereInput>
    OR?: Enumerable<LikeScalarWhereInput>
    NOT?: Enumerable<LikeScalarWhereInput>
    id?: StringFilter | string
    userId?: StringNullableFilter | string | null
    photobookId?: StringNullableFilter | string | null
    commentId?: StringNullableFilter | string | null
    created_at?: DateTimeFilter | Date | string
  }

  export type LikeUpsertWithWhereUniqueWithoutUserInput = {
    where: LikeWhereUniqueInput
    update: LikeUpdateWithoutUserInput
    create: LikeCreateWithoutUserInput
  }

  export type UserCreateWithoutPhotobooksInput = {
    id?: string
    email: string
    username: string
    password: string
    confirmed?: boolean
    created_at?: Date | string
    comments?: CommentCreateManyWithoutUserInput
    Like?: LikeCreateManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutphotobooksInput = {
    where: UserWhereUniqueInput
    create: UserCreateWithoutPhotobooksInput
  }

  export type PhotoCreateWithoutPhotobookInput = {
    id?: string
    img_id: string
    text_data?: string
    created_at?: Date | string
  }

  export type PhotoCreateOrConnectWithoutPhotobookInput = {
    where: PhotoWhereUniqueInput
    create: PhotoCreateWithoutPhotobookInput
  }

  export type CommentCreateWithoutPhotobookInput = {
    id?: string
    body: string
    created_at?: Date | string
    user?: UserCreateOneWithoutCommentsInput
    likes?: LikeCreateManyWithoutCommentInput
  }

  export type CommentCreateOrConnectWithoutphotobookInput = {
    where: CommentWhereUniqueInput
    create: CommentCreateWithoutPhotobookInput
  }

  export type LikeCreateWithoutPhotobookInput = {
    id?: string
    created_at?: Date | string
    user?: UserCreateOneWithoutLikeInput
    comment?: CommentCreateOneWithoutLikesInput
  }

  export type LikeCreateOrConnectWithoutphotobookInput = {
    where: LikeWhereUniqueInput
    create: LikeCreateWithoutPhotobookInput
  }

  export type UserUpdateWithoutPhotobooksInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    confirmed?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    comments?: CommentUpdateManyWithoutUserInput
    Like?: LikeUpdateManyWithoutUserInput
  }

  export type UserUpsertWithoutPhotobooksInput = {
    update: UserUpdateWithoutPhotobooksInput
    create: UserCreateWithoutPhotobooksInput
  }

  export type PhotoUpdateWithWhereUniqueWithoutPhotobookInput = {
    where: PhotoWhereUniqueInput
    data: PhotoUpdateWithoutPhotobookInput
  }

  export type PhotoUpdateManyWithWhereWithoutPhotobookInput = {
    where: PhotoScalarWhereInput
    data: PhotoUpdateManyMutationInput
  }

  export type PhotoScalarWhereInput = {
    AND?: Enumerable<PhotoScalarWhereInput>
    OR?: Enumerable<PhotoScalarWhereInput>
    NOT?: Enumerable<PhotoScalarWhereInput>
    id?: StringFilter | string
    img_id?: StringFilter | string
    text_data?: StringFilter | string
    photobookId?: StringNullableFilter | string | null
    created_at?: DateTimeFilter | Date | string
  }

  export type PhotoUpsertWithWhereUniqueWithoutPhotobookInput = {
    where: PhotoWhereUniqueInput
    update: PhotoUpdateWithoutPhotobookInput
    create: PhotoCreateWithoutPhotobookInput
  }

  export type CommentUpdateWithWhereUniqueWithoutPhotobookInput = {
    where: CommentWhereUniqueInput
    data: CommentUpdateWithoutPhotobookInput
  }

  export type CommentUpdateManyWithWhereWithoutPhotobookInput = {
    where: CommentScalarWhereInput
    data: CommentUpdateManyMutationInput
  }

  export type CommentUpsertWithWhereUniqueWithoutPhotobookInput = {
    where: CommentWhereUniqueInput
    update: CommentUpdateWithoutPhotobookInput
    create: CommentCreateWithoutPhotobookInput
  }

  export type LikeUpdateWithWhereUniqueWithoutPhotobookInput = {
    where: LikeWhereUniqueInput
    data: LikeUpdateWithoutPhotobookInput
  }

  export type LikeUpdateManyWithWhereWithoutPhotobookInput = {
    where: LikeScalarWhereInput
    data: LikeUpdateManyMutationInput
  }

  export type LikeUpsertWithWhereUniqueWithoutPhotobookInput = {
    where: LikeWhereUniqueInput
    update: LikeUpdateWithoutPhotobookInput
    create: LikeCreateWithoutPhotobookInput
  }

  export type PhotobookCreateWithoutPhotosInput = {
    id?: string
    created_at?: Date | string
    likesCount?: number
    commentsCount?: number
    cover_image_id?: string
    cover_text?: string
    user?: UserCreateOneWithoutPhotobooksInput
    comments?: CommentCreateManyWithoutPhotobookInput
    likes?: LikeCreateManyWithoutPhotobookInput
  }

  export type PhotobookCreateOrConnectWithoutphotosInput = {
    where: PhotobookWhereUniqueInput
    create: PhotobookCreateWithoutPhotosInput
  }

  export type PhotobookUpdateWithoutPhotosInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    likesCount?: IntFieldUpdateOperationsInput | number
    commentsCount?: IntFieldUpdateOperationsInput | number
    cover_image_id?: StringFieldUpdateOperationsInput | string
    cover_text?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneWithoutPhotobooksInput
    comments?: CommentUpdateManyWithoutPhotobookInput
    likes?: LikeUpdateManyWithoutPhotobookInput
  }

  export type PhotobookUpsertWithoutPhotosInput = {
    update: PhotobookUpdateWithoutPhotosInput
    create: PhotobookCreateWithoutPhotosInput
  }

  export type UserCreateWithoutCommentsInput = {
    id?: string
    email: string
    username: string
    password: string
    confirmed?: boolean
    created_at?: Date | string
    photobooks?: PhotobookCreateManyWithoutUserInput
    Like?: LikeCreateManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutcommentsInput = {
    where: UserWhereUniqueInput
    create: UserCreateWithoutCommentsInput
  }

  export type PhotobookCreateWithoutCommentsInput = {
    id?: string
    created_at?: Date | string
    likesCount?: number
    commentsCount?: number
    cover_image_id?: string
    cover_text?: string
    user?: UserCreateOneWithoutPhotobooksInput
    photos?: PhotoCreateManyWithoutPhotobookInput
    likes?: LikeCreateManyWithoutPhotobookInput
  }

  export type PhotobookCreateOrConnectWithoutcommentsInput = {
    where: PhotobookWhereUniqueInput
    create: PhotobookCreateWithoutCommentsInput
  }

  export type LikeCreateWithoutCommentInput = {
    id?: string
    created_at?: Date | string
    user?: UserCreateOneWithoutLikeInput
    photobook?: PhotobookCreateOneWithoutLikesInput
  }

  export type LikeCreateOrConnectWithoutcommentInput = {
    where: LikeWhereUniqueInput
    create: LikeCreateWithoutCommentInput
  }

  export type UserUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    confirmed?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    photobooks?: PhotobookUpdateManyWithoutUserInput
    Like?: LikeUpdateManyWithoutUserInput
  }

  export type UserUpsertWithoutCommentsInput = {
    update: UserUpdateWithoutCommentsInput
    create: UserCreateWithoutCommentsInput
  }

  export type PhotobookUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    likesCount?: IntFieldUpdateOperationsInput | number
    commentsCount?: IntFieldUpdateOperationsInput | number
    cover_image_id?: StringFieldUpdateOperationsInput | string
    cover_text?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneWithoutPhotobooksInput
    photos?: PhotoUpdateManyWithoutPhotobookInput
    likes?: LikeUpdateManyWithoutPhotobookInput
  }

  export type PhotobookUpsertWithoutCommentsInput = {
    update: PhotobookUpdateWithoutCommentsInput
    create: PhotobookCreateWithoutCommentsInput
  }

  export type LikeUpdateWithWhereUniqueWithoutCommentInput = {
    where: LikeWhereUniqueInput
    data: LikeUpdateWithoutCommentInput
  }

  export type LikeUpdateManyWithWhereWithoutCommentInput = {
    where: LikeScalarWhereInput
    data: LikeUpdateManyMutationInput
  }

  export type LikeUpsertWithWhereUniqueWithoutCommentInput = {
    where: LikeWhereUniqueInput
    update: LikeUpdateWithoutCommentInput
    create: LikeCreateWithoutCommentInput
  }

  export type UserCreateWithoutLikeInput = {
    id?: string
    email: string
    username: string
    password: string
    confirmed?: boolean
    created_at?: Date | string
    photobooks?: PhotobookCreateManyWithoutUserInput
    comments?: CommentCreateManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutLikeInput = {
    where: UserWhereUniqueInput
    create: UserCreateWithoutLikeInput
  }

  export type PhotobookCreateWithoutLikesInput = {
    id?: string
    created_at?: Date | string
    likesCount?: number
    commentsCount?: number
    cover_image_id?: string
    cover_text?: string
    user?: UserCreateOneWithoutPhotobooksInput
    photos?: PhotoCreateManyWithoutPhotobookInput
    comments?: CommentCreateManyWithoutPhotobookInput
  }

  export type PhotobookCreateOrConnectWithoutlikesInput = {
    where: PhotobookWhereUniqueInput
    create: PhotobookCreateWithoutLikesInput
  }

  export type CommentCreateWithoutLikesInput = {
    id?: string
    body: string
    created_at?: Date | string
    user?: UserCreateOneWithoutCommentsInput
    photobook?: PhotobookCreateOneWithoutCommentsInput
  }

  export type CommentCreateOrConnectWithoutlikesInput = {
    where: CommentWhereUniqueInput
    create: CommentCreateWithoutLikesInput
  }

  export type UserUpdateWithoutLikeInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    confirmed?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    photobooks?: PhotobookUpdateManyWithoutUserInput
    comments?: CommentUpdateManyWithoutUserInput
  }

  export type UserUpsertWithoutLikeInput = {
    update: UserUpdateWithoutLikeInput
    create: UserCreateWithoutLikeInput
  }

  export type PhotobookUpdateWithoutLikesInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    likesCount?: IntFieldUpdateOperationsInput | number
    commentsCount?: IntFieldUpdateOperationsInput | number
    cover_image_id?: StringFieldUpdateOperationsInput | string
    cover_text?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneWithoutPhotobooksInput
    photos?: PhotoUpdateManyWithoutPhotobookInput
    comments?: CommentUpdateManyWithoutPhotobookInput
  }

  export type PhotobookUpsertWithoutLikesInput = {
    update: PhotobookUpdateWithoutLikesInput
    create: PhotobookCreateWithoutLikesInput
  }

  export type CommentUpdateWithoutLikesInput = {
    id?: StringFieldUpdateOperationsInput | string
    body?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutCommentsInput
    photobook?: PhotobookUpdateOneWithoutCommentsInput
  }

  export type CommentUpsertWithoutLikesInput = {
    update: CommentUpdateWithoutLikesInput
    create: CommentCreateWithoutLikesInput
  }

  export type PhotobookUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    likesCount?: IntFieldUpdateOperationsInput | number
    commentsCount?: IntFieldUpdateOperationsInput | number
    cover_image_id?: StringFieldUpdateOperationsInput | string
    cover_text?: StringFieldUpdateOperationsInput | string
    photos?: PhotoUpdateManyWithoutPhotobookInput
    comments?: CommentUpdateManyWithoutPhotobookInput
    likes?: LikeUpdateManyWithoutPhotobookInput
  }

  export type CommentUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    body?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    photobook?: PhotobookUpdateOneWithoutCommentsInput
    likes?: LikeUpdateManyWithoutCommentInput
  }

  export type LikeUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    photobook?: PhotobookUpdateOneWithoutLikesInput
    comment?: CommentUpdateOneWithoutLikesInput
  }

  export type PhotoUpdateWithoutPhotobookInput = {
    id?: StringFieldUpdateOperationsInput | string
    img_id?: StringFieldUpdateOperationsInput | string
    text_data?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentUpdateWithoutPhotobookInput = {
    id?: StringFieldUpdateOperationsInput | string
    body?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutCommentsInput
    likes?: LikeUpdateManyWithoutCommentInput
  }

  export type LikeUpdateWithoutPhotobookInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutLikeInput
    comment?: CommentUpdateOneWithoutLikesInput
  }

  export type LikeUpdateWithoutCommentInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutLikeInput
    photobook?: PhotobookUpdateOneWithoutLikesInput
  }



  /**
   * Batch Payload for updateMany & deleteMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}

/*
* Exports for compatibility introduced in 2.12.0
* Please import from the Prisma namespace instead
*/

/**
 * @deprecated Renamed to `Prisma.UserScalarFieldEnum`
 */
export type UserScalarFieldEnum = Prisma.UserScalarFieldEnum

/**
 * @deprecated Renamed to `Prisma.PhotobookScalarFieldEnum`
 */
export type PhotobookScalarFieldEnum = Prisma.PhotobookScalarFieldEnum

/**
 * @deprecated Renamed to `Prisma.PhotoScalarFieldEnum`
 */
export type PhotoScalarFieldEnum = Prisma.PhotoScalarFieldEnum

/**
 * @deprecated Renamed to `Prisma.CommentScalarFieldEnum`
 */
export type CommentScalarFieldEnum = Prisma.CommentScalarFieldEnum

/**
 * @deprecated Renamed to `Prisma.LikeScalarFieldEnum`
 */
export type LikeScalarFieldEnum = Prisma.LikeScalarFieldEnum

/**
 * @deprecated Renamed to `Prisma.SortOrder`
 */
export type SortOrder = Prisma.SortOrder

/**
 * @deprecated Renamed to `Prisma.QueryMode`
 */
export type QueryMode = Prisma.QueryMode

/**
 * @deprecated Renamed to `Prisma.ModelName`
 */
export type ModelName = Prisma.ModelName

/**
 * @deprecated Renamed to `Prisma.AggregateUser`
 */
export type AggregateUser = Prisma.AggregateUser

/**
 * @deprecated Renamed to `Prisma.UserMinAggregateOutputType`
 */
export type UserMinAggregateOutputType = Prisma.UserMinAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.UserMaxAggregateOutputType`
 */
export type UserMaxAggregateOutputType = Prisma.UserMaxAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.UserCountAggregateOutputType`
 */
export type UserCountAggregateOutputType = Prisma.UserCountAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AggregateUserArgs`
 */
export type AggregateUserArgs = Prisma.AggregateUserArgs

/**
 * @deprecated Renamed to `Prisma.UserMinAggregateInputType`
 */
export type UserMinAggregateInputType = Prisma.UserMinAggregateInputType

/**
 * @deprecated Renamed to `Prisma.UserMaxAggregateInputType`
 */
export type UserMaxAggregateInputType = Prisma.UserMaxAggregateInputType

/**
 * @deprecated Renamed to `Prisma.UserCountAggregateInputType`
 */
export type UserCountAggregateInputType = Prisma.UserCountAggregateInputType

/**
 * @deprecated Renamed to `Prisma.UserSelect`
 */
export type UserSelect = Prisma.UserSelect

/**
 * @deprecated Renamed to `Prisma.UserInclude`
 */
export type UserInclude = Prisma.UserInclude

/**
 * @deprecated Renamed to `Prisma.FindUniqueUserArgs`
 */
export type FindUniqueUserArgs = Prisma.FindUniqueUserArgs

/**
 * @deprecated Renamed to `Prisma.FindFirstUserArgs`
 */
export type FindFirstUserArgs = Prisma.FindFirstUserArgs

/**
 * @deprecated Renamed to `Prisma.FindManyUserArgs`
 */
export type FindManyUserArgs = Prisma.FindManyUserArgs

/**
 * @deprecated Renamed to `Prisma.UserCreateArgs`
 */
export type UserCreateArgs = Prisma.UserCreateArgs

/**
 * @deprecated Renamed to `Prisma.UserUpdateArgs`
 */
export type UserUpdateArgs = Prisma.UserUpdateArgs

/**
 * @deprecated Renamed to `Prisma.UserUpdateManyArgs`
 */
export type UserUpdateManyArgs = Prisma.UserUpdateManyArgs

/**
 * @deprecated Renamed to `Prisma.UserUpsertArgs`
 */
export type UserUpsertArgs = Prisma.UserUpsertArgs

/**
 * @deprecated Renamed to `Prisma.UserDeleteArgs`
 */
export type UserDeleteArgs = Prisma.UserDeleteArgs

/**
 * @deprecated Renamed to `Prisma.UserDeleteManyArgs`
 */
export type UserDeleteManyArgs = Prisma.UserDeleteManyArgs

/**
 * @deprecated Renamed to `Prisma.AggregatePhotobook`
 */
export type AggregatePhotobook = Prisma.AggregatePhotobook

/**
 * @deprecated Renamed to `Prisma.PhotobookAvgAggregateOutputType`
 */
export type PhotobookAvgAggregateOutputType = Prisma.PhotobookAvgAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.PhotobookSumAggregateOutputType`
 */
export type PhotobookSumAggregateOutputType = Prisma.PhotobookSumAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.PhotobookMinAggregateOutputType`
 */
export type PhotobookMinAggregateOutputType = Prisma.PhotobookMinAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.PhotobookMaxAggregateOutputType`
 */
export type PhotobookMaxAggregateOutputType = Prisma.PhotobookMaxAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.PhotobookCountAggregateOutputType`
 */
export type PhotobookCountAggregateOutputType = Prisma.PhotobookCountAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AggregatePhotobookArgs`
 */
export type AggregatePhotobookArgs = Prisma.AggregatePhotobookArgs

/**
 * @deprecated Renamed to `Prisma.PhotobookAvgAggregateInputType`
 */
export type PhotobookAvgAggregateInputType = Prisma.PhotobookAvgAggregateInputType

/**
 * @deprecated Renamed to `Prisma.PhotobookSumAggregateInputType`
 */
export type PhotobookSumAggregateInputType = Prisma.PhotobookSumAggregateInputType

/**
 * @deprecated Renamed to `Prisma.PhotobookMinAggregateInputType`
 */
export type PhotobookMinAggregateInputType = Prisma.PhotobookMinAggregateInputType

/**
 * @deprecated Renamed to `Prisma.PhotobookMaxAggregateInputType`
 */
export type PhotobookMaxAggregateInputType = Prisma.PhotobookMaxAggregateInputType

/**
 * @deprecated Renamed to `Prisma.PhotobookCountAggregateInputType`
 */
export type PhotobookCountAggregateInputType = Prisma.PhotobookCountAggregateInputType

/**
 * @deprecated Renamed to `Prisma.PhotobookSelect`
 */
export type PhotobookSelect = Prisma.PhotobookSelect

/**
 * @deprecated Renamed to `Prisma.PhotobookInclude`
 */
export type PhotobookInclude = Prisma.PhotobookInclude

/**
 * @deprecated Renamed to `Prisma.FindUniquePhotobookArgs`
 */
export type FindUniquePhotobookArgs = Prisma.FindUniquePhotobookArgs

/**
 * @deprecated Renamed to `Prisma.FindFirstPhotobookArgs`
 */
export type FindFirstPhotobookArgs = Prisma.FindFirstPhotobookArgs

/**
 * @deprecated Renamed to `Prisma.FindManyPhotobookArgs`
 */
export type FindManyPhotobookArgs = Prisma.FindManyPhotobookArgs

/**
 * @deprecated Renamed to `Prisma.PhotobookCreateArgs`
 */
export type PhotobookCreateArgs = Prisma.PhotobookCreateArgs

/**
 * @deprecated Renamed to `Prisma.PhotobookUpdateArgs`
 */
export type PhotobookUpdateArgs = Prisma.PhotobookUpdateArgs

/**
 * @deprecated Renamed to `Prisma.PhotobookUpdateManyArgs`
 */
export type PhotobookUpdateManyArgs = Prisma.PhotobookUpdateManyArgs

/**
 * @deprecated Renamed to `Prisma.PhotobookUpsertArgs`
 */
export type PhotobookUpsertArgs = Prisma.PhotobookUpsertArgs

/**
 * @deprecated Renamed to `Prisma.PhotobookDeleteArgs`
 */
export type PhotobookDeleteArgs = Prisma.PhotobookDeleteArgs

/**
 * @deprecated Renamed to `Prisma.PhotobookDeleteManyArgs`
 */
export type PhotobookDeleteManyArgs = Prisma.PhotobookDeleteManyArgs

/**
 * @deprecated Renamed to `Prisma.AggregatePhoto`
 */
export type AggregatePhoto = Prisma.AggregatePhoto

/**
 * @deprecated Renamed to `Prisma.PhotoMinAggregateOutputType`
 */
export type PhotoMinAggregateOutputType = Prisma.PhotoMinAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.PhotoMaxAggregateOutputType`
 */
export type PhotoMaxAggregateOutputType = Prisma.PhotoMaxAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.PhotoCountAggregateOutputType`
 */
export type PhotoCountAggregateOutputType = Prisma.PhotoCountAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AggregatePhotoArgs`
 */
export type AggregatePhotoArgs = Prisma.AggregatePhotoArgs

/**
 * @deprecated Renamed to `Prisma.PhotoMinAggregateInputType`
 */
export type PhotoMinAggregateInputType = Prisma.PhotoMinAggregateInputType

/**
 * @deprecated Renamed to `Prisma.PhotoMaxAggregateInputType`
 */
export type PhotoMaxAggregateInputType = Prisma.PhotoMaxAggregateInputType

/**
 * @deprecated Renamed to `Prisma.PhotoCountAggregateInputType`
 */
export type PhotoCountAggregateInputType = Prisma.PhotoCountAggregateInputType

/**
 * @deprecated Renamed to `Prisma.PhotoSelect`
 */
export type PhotoSelect = Prisma.PhotoSelect

/**
 * @deprecated Renamed to `Prisma.PhotoInclude`
 */
export type PhotoInclude = Prisma.PhotoInclude

/**
 * @deprecated Renamed to `Prisma.FindUniquePhotoArgs`
 */
export type FindUniquePhotoArgs = Prisma.FindUniquePhotoArgs

/**
 * @deprecated Renamed to `Prisma.FindFirstPhotoArgs`
 */
export type FindFirstPhotoArgs = Prisma.FindFirstPhotoArgs

/**
 * @deprecated Renamed to `Prisma.FindManyPhotoArgs`
 */
export type FindManyPhotoArgs = Prisma.FindManyPhotoArgs

/**
 * @deprecated Renamed to `Prisma.PhotoCreateArgs`
 */
export type PhotoCreateArgs = Prisma.PhotoCreateArgs

/**
 * @deprecated Renamed to `Prisma.PhotoUpdateArgs`
 */
export type PhotoUpdateArgs = Prisma.PhotoUpdateArgs

/**
 * @deprecated Renamed to `Prisma.PhotoUpdateManyArgs`
 */
export type PhotoUpdateManyArgs = Prisma.PhotoUpdateManyArgs

/**
 * @deprecated Renamed to `Prisma.PhotoUpsertArgs`
 */
export type PhotoUpsertArgs = Prisma.PhotoUpsertArgs

/**
 * @deprecated Renamed to `Prisma.PhotoDeleteArgs`
 */
export type PhotoDeleteArgs = Prisma.PhotoDeleteArgs

/**
 * @deprecated Renamed to `Prisma.PhotoDeleteManyArgs`
 */
export type PhotoDeleteManyArgs = Prisma.PhotoDeleteManyArgs

/**
 * @deprecated Renamed to `Prisma.AggregateComment`
 */
export type AggregateComment = Prisma.AggregateComment

/**
 * @deprecated Renamed to `Prisma.CommentMinAggregateOutputType`
 */
export type CommentMinAggregateOutputType = Prisma.CommentMinAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.CommentMaxAggregateOutputType`
 */
export type CommentMaxAggregateOutputType = Prisma.CommentMaxAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.CommentCountAggregateOutputType`
 */
export type CommentCountAggregateOutputType = Prisma.CommentCountAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AggregateCommentArgs`
 */
export type AggregateCommentArgs = Prisma.AggregateCommentArgs

/**
 * @deprecated Renamed to `Prisma.CommentMinAggregateInputType`
 */
export type CommentMinAggregateInputType = Prisma.CommentMinAggregateInputType

/**
 * @deprecated Renamed to `Prisma.CommentMaxAggregateInputType`
 */
export type CommentMaxAggregateInputType = Prisma.CommentMaxAggregateInputType

/**
 * @deprecated Renamed to `Prisma.CommentCountAggregateInputType`
 */
export type CommentCountAggregateInputType = Prisma.CommentCountAggregateInputType

/**
 * @deprecated Renamed to `Prisma.CommentSelect`
 */
export type CommentSelect = Prisma.CommentSelect

/**
 * @deprecated Renamed to `Prisma.CommentInclude`
 */
export type CommentInclude = Prisma.CommentInclude

/**
 * @deprecated Renamed to `Prisma.FindUniqueCommentArgs`
 */
export type FindUniqueCommentArgs = Prisma.FindUniqueCommentArgs

/**
 * @deprecated Renamed to `Prisma.FindFirstCommentArgs`
 */
export type FindFirstCommentArgs = Prisma.FindFirstCommentArgs

/**
 * @deprecated Renamed to `Prisma.FindManyCommentArgs`
 */
export type FindManyCommentArgs = Prisma.FindManyCommentArgs

/**
 * @deprecated Renamed to `Prisma.CommentCreateArgs`
 */
export type CommentCreateArgs = Prisma.CommentCreateArgs

/**
 * @deprecated Renamed to `Prisma.CommentUpdateArgs`
 */
export type CommentUpdateArgs = Prisma.CommentUpdateArgs

/**
 * @deprecated Renamed to `Prisma.CommentUpdateManyArgs`
 */
export type CommentUpdateManyArgs = Prisma.CommentUpdateManyArgs

/**
 * @deprecated Renamed to `Prisma.CommentUpsertArgs`
 */
export type CommentUpsertArgs = Prisma.CommentUpsertArgs

/**
 * @deprecated Renamed to `Prisma.CommentDeleteArgs`
 */
export type CommentDeleteArgs = Prisma.CommentDeleteArgs

/**
 * @deprecated Renamed to `Prisma.CommentDeleteManyArgs`
 */
export type CommentDeleteManyArgs = Prisma.CommentDeleteManyArgs

/**
 * @deprecated Renamed to `Prisma.AggregateLike`
 */
export type AggregateLike = Prisma.AggregateLike

/**
 * @deprecated Renamed to `Prisma.LikeMinAggregateOutputType`
 */
export type LikeMinAggregateOutputType = Prisma.LikeMinAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.LikeMaxAggregateOutputType`
 */
export type LikeMaxAggregateOutputType = Prisma.LikeMaxAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.LikeCountAggregateOutputType`
 */
export type LikeCountAggregateOutputType = Prisma.LikeCountAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AggregateLikeArgs`
 */
export type AggregateLikeArgs = Prisma.AggregateLikeArgs

/**
 * @deprecated Renamed to `Prisma.LikeMinAggregateInputType`
 */
export type LikeMinAggregateInputType = Prisma.LikeMinAggregateInputType

/**
 * @deprecated Renamed to `Prisma.LikeMaxAggregateInputType`
 */
export type LikeMaxAggregateInputType = Prisma.LikeMaxAggregateInputType

/**
 * @deprecated Renamed to `Prisma.LikeCountAggregateInputType`
 */
export type LikeCountAggregateInputType = Prisma.LikeCountAggregateInputType

/**
 * @deprecated Renamed to `Prisma.LikeSelect`
 */
export type LikeSelect = Prisma.LikeSelect

/**
 * @deprecated Renamed to `Prisma.LikeInclude`
 */
export type LikeInclude = Prisma.LikeInclude

/**
 * @deprecated Renamed to `Prisma.FindUniqueLikeArgs`
 */
export type FindUniqueLikeArgs = Prisma.FindUniqueLikeArgs

/**
 * @deprecated Renamed to `Prisma.FindFirstLikeArgs`
 */
export type FindFirstLikeArgs = Prisma.FindFirstLikeArgs

/**
 * @deprecated Renamed to `Prisma.FindManyLikeArgs`
 */
export type FindManyLikeArgs = Prisma.FindManyLikeArgs

/**
 * @deprecated Renamed to `Prisma.LikeCreateArgs`
 */
export type LikeCreateArgs = Prisma.LikeCreateArgs

/**
 * @deprecated Renamed to `Prisma.LikeUpdateArgs`
 */
export type LikeUpdateArgs = Prisma.LikeUpdateArgs

/**
 * @deprecated Renamed to `Prisma.LikeUpdateManyArgs`
 */
export type LikeUpdateManyArgs = Prisma.LikeUpdateManyArgs

/**
 * @deprecated Renamed to `Prisma.LikeUpsertArgs`
 */
export type LikeUpsertArgs = Prisma.LikeUpsertArgs

/**
 * @deprecated Renamed to `Prisma.LikeDeleteArgs`
 */
export type LikeDeleteArgs = Prisma.LikeDeleteArgs

/**
 * @deprecated Renamed to `Prisma.LikeDeleteManyArgs`
 */
export type LikeDeleteManyArgs = Prisma.LikeDeleteManyArgs

/**
 * @deprecated Renamed to `Prisma.UserWhereInput`
 */
export type UserWhereInput = Prisma.UserWhereInput

/**
 * @deprecated Renamed to `Prisma.UserOrderByInput`
 */
export type UserOrderByInput = Prisma.UserOrderByInput

/**
 * @deprecated Renamed to `Prisma.UserWhereUniqueInput`
 */
export type UserWhereUniqueInput = Prisma.UserWhereUniqueInput

/**
 * @deprecated Renamed to `Prisma.PhotobookWhereInput`
 */
export type PhotobookWhereInput = Prisma.PhotobookWhereInput

/**
 * @deprecated Renamed to `Prisma.PhotobookOrderByInput`
 */
export type PhotobookOrderByInput = Prisma.PhotobookOrderByInput

/**
 * @deprecated Renamed to `Prisma.PhotobookWhereUniqueInput`
 */
export type PhotobookWhereUniqueInput = Prisma.PhotobookWhereUniqueInput

/**
 * @deprecated Renamed to `Prisma.PhotoWhereInput`
 */
export type PhotoWhereInput = Prisma.PhotoWhereInput

/**
 * @deprecated Renamed to `Prisma.PhotoOrderByInput`
 */
export type PhotoOrderByInput = Prisma.PhotoOrderByInput

/**
 * @deprecated Renamed to `Prisma.PhotoWhereUniqueInput`
 */
export type PhotoWhereUniqueInput = Prisma.PhotoWhereUniqueInput

/**
 * @deprecated Renamed to `Prisma.CommentWhereInput`
 */
export type CommentWhereInput = Prisma.CommentWhereInput

/**
 * @deprecated Renamed to `Prisma.CommentOrderByInput`
 */
export type CommentOrderByInput = Prisma.CommentOrderByInput

/**
 * @deprecated Renamed to `Prisma.CommentWhereUniqueInput`
 */
export type CommentWhereUniqueInput = Prisma.CommentWhereUniqueInput

/**
 * @deprecated Renamed to `Prisma.LikeWhereInput`
 */
export type LikeWhereInput = Prisma.LikeWhereInput

/**
 * @deprecated Renamed to `Prisma.LikeOrderByInput`
 */
export type LikeOrderByInput = Prisma.LikeOrderByInput

/**
 * @deprecated Renamed to `Prisma.LikeWhereUniqueInput`
 */
export type LikeWhereUniqueInput = Prisma.LikeWhereUniqueInput

/**
 * @deprecated Renamed to `Prisma.UserCreateInput`
 */
export type UserCreateInput = Prisma.UserCreateInput

/**
 * @deprecated Renamed to `Prisma.UserUpdateInput`
 */
export type UserUpdateInput = Prisma.UserUpdateInput

/**
 * @deprecated Renamed to `Prisma.UserUpdateManyMutationInput`
 */
export type UserUpdateManyMutationInput = Prisma.UserUpdateManyMutationInput

/**
 * @deprecated Renamed to `Prisma.PhotobookCreateInput`
 */
export type PhotobookCreateInput = Prisma.PhotobookCreateInput

/**
 * @deprecated Renamed to `Prisma.PhotobookUpdateInput`
 */
export type PhotobookUpdateInput = Prisma.PhotobookUpdateInput

/**
 * @deprecated Renamed to `Prisma.PhotobookUpdateManyMutationInput`
 */
export type PhotobookUpdateManyMutationInput = Prisma.PhotobookUpdateManyMutationInput

/**
 * @deprecated Renamed to `Prisma.PhotoCreateInput`
 */
export type PhotoCreateInput = Prisma.PhotoCreateInput

/**
 * @deprecated Renamed to `Prisma.PhotoUpdateInput`
 */
export type PhotoUpdateInput = Prisma.PhotoUpdateInput

/**
 * @deprecated Renamed to `Prisma.PhotoUpdateManyMutationInput`
 */
export type PhotoUpdateManyMutationInput = Prisma.PhotoUpdateManyMutationInput

/**
 * @deprecated Renamed to `Prisma.CommentCreateInput`
 */
export type CommentCreateInput = Prisma.CommentCreateInput

/**
 * @deprecated Renamed to `Prisma.CommentUpdateInput`
 */
export type CommentUpdateInput = Prisma.CommentUpdateInput

/**
 * @deprecated Renamed to `Prisma.CommentUpdateManyMutationInput`
 */
export type CommentUpdateManyMutationInput = Prisma.CommentUpdateManyMutationInput

/**
 * @deprecated Renamed to `Prisma.LikeCreateInput`
 */
export type LikeCreateInput = Prisma.LikeCreateInput

/**
 * @deprecated Renamed to `Prisma.LikeUpdateInput`
 */
export type LikeUpdateInput = Prisma.LikeUpdateInput

/**
 * @deprecated Renamed to `Prisma.LikeUpdateManyMutationInput`
 */
export type LikeUpdateManyMutationInput = Prisma.LikeUpdateManyMutationInput

/**
 * @deprecated Renamed to `Prisma.StringFilter`
 */
export type StringFilter = Prisma.StringFilter

/**
 * @deprecated Renamed to `Prisma.BoolFilter`
 */
export type BoolFilter = Prisma.BoolFilter

/**
 * @deprecated Renamed to `Prisma.DateTimeFilter`
 */
export type DateTimeFilter = Prisma.DateTimeFilter

/**
 * @deprecated Renamed to `Prisma.PhotobookListRelationFilter`
 */
export type PhotobookListRelationFilter = Prisma.PhotobookListRelationFilter

/**
 * @deprecated Renamed to `Prisma.CommentListRelationFilter`
 */
export type CommentListRelationFilter = Prisma.CommentListRelationFilter

/**
 * @deprecated Renamed to `Prisma.LikeListRelationFilter`
 */
export type LikeListRelationFilter = Prisma.LikeListRelationFilter

/**
 * @deprecated Renamed to `Prisma.UserRelationFilter`
 */
export type UserRelationFilter = Prisma.UserRelationFilter

/**
 * @deprecated Renamed to `Prisma.StringNullableFilter`
 */
export type StringNullableFilter = Prisma.StringNullableFilter

/**
 * @deprecated Renamed to `Prisma.PhotoListRelationFilter`
 */
export type PhotoListRelationFilter = Prisma.PhotoListRelationFilter

/**
 * @deprecated Renamed to `Prisma.IntFilter`
 */
export type IntFilter = Prisma.IntFilter

/**
 * @deprecated Renamed to `Prisma.PhotobookRelationFilter`
 */
export type PhotobookRelationFilter = Prisma.PhotobookRelationFilter

/**
 * @deprecated Renamed to `Prisma.CommentRelationFilter`
 */
export type CommentRelationFilter = Prisma.CommentRelationFilter

/**
 * @deprecated Renamed to `Prisma.Photobook_likedCompoundUniqueInput`
 */
export type Photobook_likedCompoundUniqueInput = Prisma.Photobook_likedCompoundUniqueInput

/**
 * @deprecated Renamed to `Prisma.Comment_likedCompoundUniqueInput`
 */
export type Comment_likedCompoundUniqueInput = Prisma.Comment_likedCompoundUniqueInput

/**
 * @deprecated Renamed to `Prisma.PhotobookCreateManyWithoutUserInput`
 */
export type PhotobookCreateManyWithoutUserInput = Prisma.PhotobookCreateManyWithoutUserInput

/**
 * @deprecated Renamed to `Prisma.CommentCreateManyWithoutUserInput`
 */
export type CommentCreateManyWithoutUserInput = Prisma.CommentCreateManyWithoutUserInput

/**
 * @deprecated Renamed to `Prisma.LikeCreateManyWithoutUserInput`
 */
export type LikeCreateManyWithoutUserInput = Prisma.LikeCreateManyWithoutUserInput

/**
 * @deprecated Renamed to `Prisma.StringFieldUpdateOperationsInput`
 */
export type StringFieldUpdateOperationsInput = Prisma.StringFieldUpdateOperationsInput

/**
 * @deprecated Renamed to `Prisma.BoolFieldUpdateOperationsInput`
 */
export type BoolFieldUpdateOperationsInput = Prisma.BoolFieldUpdateOperationsInput

/**
 * @deprecated Renamed to `Prisma.DateTimeFieldUpdateOperationsInput`
 */
export type DateTimeFieldUpdateOperationsInput = Prisma.DateTimeFieldUpdateOperationsInput

/**
 * @deprecated Renamed to `Prisma.PhotobookUpdateManyWithoutUserInput`
 */
export type PhotobookUpdateManyWithoutUserInput = Prisma.PhotobookUpdateManyWithoutUserInput

/**
 * @deprecated Renamed to `Prisma.CommentUpdateManyWithoutUserInput`
 */
export type CommentUpdateManyWithoutUserInput = Prisma.CommentUpdateManyWithoutUserInput

/**
 * @deprecated Renamed to `Prisma.LikeUpdateManyWithoutUserInput`
 */
export type LikeUpdateManyWithoutUserInput = Prisma.LikeUpdateManyWithoutUserInput

/**
 * @deprecated Renamed to `Prisma.UserCreateOneWithoutPhotobooksInput`
 */
export type UserCreateOneWithoutPhotobooksInput = Prisma.UserCreateOneWithoutPhotobooksInput

/**
 * @deprecated Renamed to `Prisma.PhotoCreateManyWithoutPhotobookInput`
 */
export type PhotoCreateManyWithoutPhotobookInput = Prisma.PhotoCreateManyWithoutPhotobookInput

/**
 * @deprecated Renamed to `Prisma.CommentCreateManyWithoutPhotobookInput`
 */
export type CommentCreateManyWithoutPhotobookInput = Prisma.CommentCreateManyWithoutPhotobookInput

/**
 * @deprecated Renamed to `Prisma.LikeCreateManyWithoutPhotobookInput`
 */
export type LikeCreateManyWithoutPhotobookInput = Prisma.LikeCreateManyWithoutPhotobookInput

/**
 * @deprecated Renamed to `Prisma.IntFieldUpdateOperationsInput`
 */
export type IntFieldUpdateOperationsInput = Prisma.IntFieldUpdateOperationsInput

/**
 * @deprecated Renamed to `Prisma.UserUpdateOneWithoutPhotobooksInput`
 */
export type UserUpdateOneWithoutPhotobooksInput = Prisma.UserUpdateOneWithoutPhotobooksInput

/**
 * @deprecated Renamed to `Prisma.PhotoUpdateManyWithoutPhotobookInput`
 */
export type PhotoUpdateManyWithoutPhotobookInput = Prisma.PhotoUpdateManyWithoutPhotobookInput

/**
 * @deprecated Renamed to `Prisma.CommentUpdateManyWithoutPhotobookInput`
 */
export type CommentUpdateManyWithoutPhotobookInput = Prisma.CommentUpdateManyWithoutPhotobookInput

/**
 * @deprecated Renamed to `Prisma.LikeUpdateManyWithoutPhotobookInput`
 */
export type LikeUpdateManyWithoutPhotobookInput = Prisma.LikeUpdateManyWithoutPhotobookInput

/**
 * @deprecated Renamed to `Prisma.PhotobookCreateOneWithoutPhotosInput`
 */
export type PhotobookCreateOneWithoutPhotosInput = Prisma.PhotobookCreateOneWithoutPhotosInput

/**
 * @deprecated Renamed to `Prisma.PhotobookUpdateOneWithoutPhotosInput`
 */
export type PhotobookUpdateOneWithoutPhotosInput = Prisma.PhotobookUpdateOneWithoutPhotosInput

/**
 * @deprecated Renamed to `Prisma.UserCreateOneWithoutCommentsInput`
 */
export type UserCreateOneWithoutCommentsInput = Prisma.UserCreateOneWithoutCommentsInput

/**
 * @deprecated Renamed to `Prisma.PhotobookCreateOneWithoutCommentsInput`
 */
export type PhotobookCreateOneWithoutCommentsInput = Prisma.PhotobookCreateOneWithoutCommentsInput

/**
 * @deprecated Renamed to `Prisma.LikeCreateManyWithoutCommentInput`
 */
export type LikeCreateManyWithoutCommentInput = Prisma.LikeCreateManyWithoutCommentInput

/**
 * @deprecated Renamed to `Prisma.UserUpdateOneWithoutCommentsInput`
 */
export type UserUpdateOneWithoutCommentsInput = Prisma.UserUpdateOneWithoutCommentsInput

/**
 * @deprecated Renamed to `Prisma.PhotobookUpdateOneWithoutCommentsInput`
 */
export type PhotobookUpdateOneWithoutCommentsInput = Prisma.PhotobookUpdateOneWithoutCommentsInput

/**
 * @deprecated Renamed to `Prisma.LikeUpdateManyWithoutCommentInput`
 */
export type LikeUpdateManyWithoutCommentInput = Prisma.LikeUpdateManyWithoutCommentInput

/**
 * @deprecated Renamed to `Prisma.UserCreateOneWithoutLikeInput`
 */
export type UserCreateOneWithoutLikeInput = Prisma.UserCreateOneWithoutLikeInput

/**
 * @deprecated Renamed to `Prisma.PhotobookCreateOneWithoutLikesInput`
 */
export type PhotobookCreateOneWithoutLikesInput = Prisma.PhotobookCreateOneWithoutLikesInput

/**
 * @deprecated Renamed to `Prisma.CommentCreateOneWithoutLikesInput`
 */
export type CommentCreateOneWithoutLikesInput = Prisma.CommentCreateOneWithoutLikesInput

/**
 * @deprecated Renamed to `Prisma.UserUpdateOneWithoutLikeInput`
 */
export type UserUpdateOneWithoutLikeInput = Prisma.UserUpdateOneWithoutLikeInput

/**
 * @deprecated Renamed to `Prisma.PhotobookUpdateOneWithoutLikesInput`
 */
export type PhotobookUpdateOneWithoutLikesInput = Prisma.PhotobookUpdateOneWithoutLikesInput

/**
 * @deprecated Renamed to `Prisma.CommentUpdateOneWithoutLikesInput`
 */
export type CommentUpdateOneWithoutLikesInput = Prisma.CommentUpdateOneWithoutLikesInput

/**
 * @deprecated Renamed to `Prisma.NestedStringFilter`
 */
export type NestedStringFilter = Prisma.NestedStringFilter

/**
 * @deprecated Renamed to `Prisma.NestedBoolFilter`
 */
export type NestedBoolFilter = Prisma.NestedBoolFilter

/**
 * @deprecated Renamed to `Prisma.NestedDateTimeFilter`
 */
export type NestedDateTimeFilter = Prisma.NestedDateTimeFilter

/**
 * @deprecated Renamed to `Prisma.NestedStringNullableFilter`
 */
export type NestedStringNullableFilter = Prisma.NestedStringNullableFilter

/**
 * @deprecated Renamed to `Prisma.NestedIntFilter`
 */
export type NestedIntFilter = Prisma.NestedIntFilter

/**
 * @deprecated Renamed to `Prisma.PhotobookCreateWithoutUserInput`
 */
export type PhotobookCreateWithoutUserInput = Prisma.PhotobookCreateWithoutUserInput

/**
 * @deprecated Renamed to `Prisma.PhotobookCreateOrConnectWithoutuserInput`
 */
export type PhotobookCreateOrConnectWithoutuserInput = Prisma.PhotobookCreateOrConnectWithoutuserInput

/**
 * @deprecated Renamed to `Prisma.CommentCreateWithoutUserInput`
 */
export type CommentCreateWithoutUserInput = Prisma.CommentCreateWithoutUserInput

/**
 * @deprecated Renamed to `Prisma.CommentCreateOrConnectWithoutuserInput`
 */
export type CommentCreateOrConnectWithoutuserInput = Prisma.CommentCreateOrConnectWithoutuserInput

/**
 * @deprecated Renamed to `Prisma.LikeCreateWithoutUserInput`
 */
export type LikeCreateWithoutUserInput = Prisma.LikeCreateWithoutUserInput

/**
 * @deprecated Renamed to `Prisma.LikeCreateOrConnectWithoutuserInput`
 */
export type LikeCreateOrConnectWithoutuserInput = Prisma.LikeCreateOrConnectWithoutuserInput

/**
 * @deprecated Renamed to `Prisma.PhotobookUpdateWithWhereUniqueWithoutUserInput`
 */
export type PhotobookUpdateWithWhereUniqueWithoutUserInput = Prisma.PhotobookUpdateWithWhereUniqueWithoutUserInput

/**
 * @deprecated Renamed to `Prisma.PhotobookUpdateManyWithWhereWithoutUserInput`
 */
export type PhotobookUpdateManyWithWhereWithoutUserInput = Prisma.PhotobookUpdateManyWithWhereWithoutUserInput

/**
 * @deprecated Renamed to `Prisma.PhotobookScalarWhereInput`
 */
export type PhotobookScalarWhereInput = Prisma.PhotobookScalarWhereInput

/**
 * @deprecated Renamed to `Prisma.PhotobookUpsertWithWhereUniqueWithoutUserInput`
 */
export type PhotobookUpsertWithWhereUniqueWithoutUserInput = Prisma.PhotobookUpsertWithWhereUniqueWithoutUserInput

/**
 * @deprecated Renamed to `Prisma.CommentUpdateWithWhereUniqueWithoutUserInput`
 */
export type CommentUpdateWithWhereUniqueWithoutUserInput = Prisma.CommentUpdateWithWhereUniqueWithoutUserInput

/**
 * @deprecated Renamed to `Prisma.CommentUpdateManyWithWhereWithoutUserInput`
 */
export type CommentUpdateManyWithWhereWithoutUserInput = Prisma.CommentUpdateManyWithWhereWithoutUserInput

/**
 * @deprecated Renamed to `Prisma.CommentScalarWhereInput`
 */
export type CommentScalarWhereInput = Prisma.CommentScalarWhereInput

/**
 * @deprecated Renamed to `Prisma.CommentUpsertWithWhereUniqueWithoutUserInput`
 */
export type CommentUpsertWithWhereUniqueWithoutUserInput = Prisma.CommentUpsertWithWhereUniqueWithoutUserInput

/**
 * @deprecated Renamed to `Prisma.LikeUpdateWithWhereUniqueWithoutUserInput`
 */
export type LikeUpdateWithWhereUniqueWithoutUserInput = Prisma.LikeUpdateWithWhereUniqueWithoutUserInput

/**
 * @deprecated Renamed to `Prisma.LikeUpdateManyWithWhereWithoutUserInput`
 */
export type LikeUpdateManyWithWhereWithoutUserInput = Prisma.LikeUpdateManyWithWhereWithoutUserInput

/**
 * @deprecated Renamed to `Prisma.LikeScalarWhereInput`
 */
export type LikeScalarWhereInput = Prisma.LikeScalarWhereInput

/**
 * @deprecated Renamed to `Prisma.LikeUpsertWithWhereUniqueWithoutUserInput`
 */
export type LikeUpsertWithWhereUniqueWithoutUserInput = Prisma.LikeUpsertWithWhereUniqueWithoutUserInput

/**
 * @deprecated Renamed to `Prisma.UserCreateWithoutPhotobooksInput`
 */
export type UserCreateWithoutPhotobooksInput = Prisma.UserCreateWithoutPhotobooksInput

/**
 * @deprecated Renamed to `Prisma.UserCreateOrConnectWithoutphotobooksInput`
 */
export type UserCreateOrConnectWithoutphotobooksInput = Prisma.UserCreateOrConnectWithoutphotobooksInput

/**
 * @deprecated Renamed to `Prisma.PhotoCreateWithoutPhotobookInput`
 */
export type PhotoCreateWithoutPhotobookInput = Prisma.PhotoCreateWithoutPhotobookInput

/**
 * @deprecated Renamed to `Prisma.PhotoCreateOrConnectWithoutPhotobookInput`
 */
export type PhotoCreateOrConnectWithoutPhotobookInput = Prisma.PhotoCreateOrConnectWithoutPhotobookInput

/**
 * @deprecated Renamed to `Prisma.CommentCreateWithoutPhotobookInput`
 */
export type CommentCreateWithoutPhotobookInput = Prisma.CommentCreateWithoutPhotobookInput

/**
 * @deprecated Renamed to `Prisma.CommentCreateOrConnectWithoutphotobookInput`
 */
export type CommentCreateOrConnectWithoutphotobookInput = Prisma.CommentCreateOrConnectWithoutphotobookInput

/**
 * @deprecated Renamed to `Prisma.LikeCreateWithoutPhotobookInput`
 */
export type LikeCreateWithoutPhotobookInput = Prisma.LikeCreateWithoutPhotobookInput

/**
 * @deprecated Renamed to `Prisma.LikeCreateOrConnectWithoutphotobookInput`
 */
export type LikeCreateOrConnectWithoutphotobookInput = Prisma.LikeCreateOrConnectWithoutphotobookInput

/**
 * @deprecated Renamed to `Prisma.UserUpdateWithoutPhotobooksInput`
 */
export type UserUpdateWithoutPhotobooksInput = Prisma.UserUpdateWithoutPhotobooksInput

/**
 * @deprecated Renamed to `Prisma.UserUpsertWithoutPhotobooksInput`
 */
export type UserUpsertWithoutPhotobooksInput = Prisma.UserUpsertWithoutPhotobooksInput

/**
 * @deprecated Renamed to `Prisma.PhotoUpdateWithWhereUniqueWithoutPhotobookInput`
 */
export type PhotoUpdateWithWhereUniqueWithoutPhotobookInput = Prisma.PhotoUpdateWithWhereUniqueWithoutPhotobookInput

/**
 * @deprecated Renamed to `Prisma.PhotoUpdateManyWithWhereWithoutPhotobookInput`
 */
export type PhotoUpdateManyWithWhereWithoutPhotobookInput = Prisma.PhotoUpdateManyWithWhereWithoutPhotobookInput

/**
 * @deprecated Renamed to `Prisma.PhotoScalarWhereInput`
 */
export type PhotoScalarWhereInput = Prisma.PhotoScalarWhereInput

/**
 * @deprecated Renamed to `Prisma.PhotoUpsertWithWhereUniqueWithoutPhotobookInput`
 */
export type PhotoUpsertWithWhereUniqueWithoutPhotobookInput = Prisma.PhotoUpsertWithWhereUniqueWithoutPhotobookInput

/**
 * @deprecated Renamed to `Prisma.CommentUpdateWithWhereUniqueWithoutPhotobookInput`
 */
export type CommentUpdateWithWhereUniqueWithoutPhotobookInput = Prisma.CommentUpdateWithWhereUniqueWithoutPhotobookInput

/**
 * @deprecated Renamed to `Prisma.CommentUpdateManyWithWhereWithoutPhotobookInput`
 */
export type CommentUpdateManyWithWhereWithoutPhotobookInput = Prisma.CommentUpdateManyWithWhereWithoutPhotobookInput

/**
 * @deprecated Renamed to `Prisma.CommentUpsertWithWhereUniqueWithoutPhotobookInput`
 */
export type CommentUpsertWithWhereUniqueWithoutPhotobookInput = Prisma.CommentUpsertWithWhereUniqueWithoutPhotobookInput

/**
 * @deprecated Renamed to `Prisma.LikeUpdateWithWhereUniqueWithoutPhotobookInput`
 */
export type LikeUpdateWithWhereUniqueWithoutPhotobookInput = Prisma.LikeUpdateWithWhereUniqueWithoutPhotobookInput

/**
 * @deprecated Renamed to `Prisma.LikeUpdateManyWithWhereWithoutPhotobookInput`
 */
export type LikeUpdateManyWithWhereWithoutPhotobookInput = Prisma.LikeUpdateManyWithWhereWithoutPhotobookInput

/**
 * @deprecated Renamed to `Prisma.LikeUpsertWithWhereUniqueWithoutPhotobookInput`
 */
export type LikeUpsertWithWhereUniqueWithoutPhotobookInput = Prisma.LikeUpsertWithWhereUniqueWithoutPhotobookInput

/**
 * @deprecated Renamed to `Prisma.PhotobookCreateWithoutPhotosInput`
 */
export type PhotobookCreateWithoutPhotosInput = Prisma.PhotobookCreateWithoutPhotosInput

/**
 * @deprecated Renamed to `Prisma.PhotobookCreateOrConnectWithoutphotosInput`
 */
export type PhotobookCreateOrConnectWithoutphotosInput = Prisma.PhotobookCreateOrConnectWithoutphotosInput

/**
 * @deprecated Renamed to `Prisma.PhotobookUpdateWithoutPhotosInput`
 */
export type PhotobookUpdateWithoutPhotosInput = Prisma.PhotobookUpdateWithoutPhotosInput

/**
 * @deprecated Renamed to `Prisma.PhotobookUpsertWithoutPhotosInput`
 */
export type PhotobookUpsertWithoutPhotosInput = Prisma.PhotobookUpsertWithoutPhotosInput

/**
 * @deprecated Renamed to `Prisma.UserCreateWithoutCommentsInput`
 */
export type UserCreateWithoutCommentsInput = Prisma.UserCreateWithoutCommentsInput

/**
 * @deprecated Renamed to `Prisma.UserCreateOrConnectWithoutcommentsInput`
 */
export type UserCreateOrConnectWithoutcommentsInput = Prisma.UserCreateOrConnectWithoutcommentsInput

/**
 * @deprecated Renamed to `Prisma.PhotobookCreateWithoutCommentsInput`
 */
export type PhotobookCreateWithoutCommentsInput = Prisma.PhotobookCreateWithoutCommentsInput

/**
 * @deprecated Renamed to `Prisma.PhotobookCreateOrConnectWithoutcommentsInput`
 */
export type PhotobookCreateOrConnectWithoutcommentsInput = Prisma.PhotobookCreateOrConnectWithoutcommentsInput

/**
 * @deprecated Renamed to `Prisma.LikeCreateWithoutCommentInput`
 */
export type LikeCreateWithoutCommentInput = Prisma.LikeCreateWithoutCommentInput

/**
 * @deprecated Renamed to `Prisma.LikeCreateOrConnectWithoutcommentInput`
 */
export type LikeCreateOrConnectWithoutcommentInput = Prisma.LikeCreateOrConnectWithoutcommentInput

/**
 * @deprecated Renamed to `Prisma.UserUpdateWithoutCommentsInput`
 */
export type UserUpdateWithoutCommentsInput = Prisma.UserUpdateWithoutCommentsInput

/**
 * @deprecated Renamed to `Prisma.UserUpsertWithoutCommentsInput`
 */
export type UserUpsertWithoutCommentsInput = Prisma.UserUpsertWithoutCommentsInput

/**
 * @deprecated Renamed to `Prisma.PhotobookUpdateWithoutCommentsInput`
 */
export type PhotobookUpdateWithoutCommentsInput = Prisma.PhotobookUpdateWithoutCommentsInput

/**
 * @deprecated Renamed to `Prisma.PhotobookUpsertWithoutCommentsInput`
 */
export type PhotobookUpsertWithoutCommentsInput = Prisma.PhotobookUpsertWithoutCommentsInput

/**
 * @deprecated Renamed to `Prisma.LikeUpdateWithWhereUniqueWithoutCommentInput`
 */
export type LikeUpdateWithWhereUniqueWithoutCommentInput = Prisma.LikeUpdateWithWhereUniqueWithoutCommentInput

/**
 * @deprecated Renamed to `Prisma.LikeUpdateManyWithWhereWithoutCommentInput`
 */
export type LikeUpdateManyWithWhereWithoutCommentInput = Prisma.LikeUpdateManyWithWhereWithoutCommentInput

/**
 * @deprecated Renamed to `Prisma.LikeUpsertWithWhereUniqueWithoutCommentInput`
 */
export type LikeUpsertWithWhereUniqueWithoutCommentInput = Prisma.LikeUpsertWithWhereUniqueWithoutCommentInput

/**
 * @deprecated Renamed to `Prisma.UserCreateWithoutLikeInput`
 */
export type UserCreateWithoutLikeInput = Prisma.UserCreateWithoutLikeInput

/**
 * @deprecated Renamed to `Prisma.UserCreateOrConnectWithoutLikeInput`
 */
export type UserCreateOrConnectWithoutLikeInput = Prisma.UserCreateOrConnectWithoutLikeInput

/**
 * @deprecated Renamed to `Prisma.PhotobookCreateWithoutLikesInput`
 */
export type PhotobookCreateWithoutLikesInput = Prisma.PhotobookCreateWithoutLikesInput

/**
 * @deprecated Renamed to `Prisma.PhotobookCreateOrConnectWithoutlikesInput`
 */
export type PhotobookCreateOrConnectWithoutlikesInput = Prisma.PhotobookCreateOrConnectWithoutlikesInput

/**
 * @deprecated Renamed to `Prisma.CommentCreateWithoutLikesInput`
 */
export type CommentCreateWithoutLikesInput = Prisma.CommentCreateWithoutLikesInput

/**
 * @deprecated Renamed to `Prisma.CommentCreateOrConnectWithoutlikesInput`
 */
export type CommentCreateOrConnectWithoutlikesInput = Prisma.CommentCreateOrConnectWithoutlikesInput

/**
 * @deprecated Renamed to `Prisma.UserUpdateWithoutLikeInput`
 */
export type UserUpdateWithoutLikeInput = Prisma.UserUpdateWithoutLikeInput

/**
 * @deprecated Renamed to `Prisma.UserUpsertWithoutLikeInput`
 */
export type UserUpsertWithoutLikeInput = Prisma.UserUpsertWithoutLikeInput

/**
 * @deprecated Renamed to `Prisma.PhotobookUpdateWithoutLikesInput`
 */
export type PhotobookUpdateWithoutLikesInput = Prisma.PhotobookUpdateWithoutLikesInput

/**
 * @deprecated Renamed to `Prisma.PhotobookUpsertWithoutLikesInput`
 */
export type PhotobookUpsertWithoutLikesInput = Prisma.PhotobookUpsertWithoutLikesInput

/**
 * @deprecated Renamed to `Prisma.CommentUpdateWithoutLikesInput`
 */
export type CommentUpdateWithoutLikesInput = Prisma.CommentUpdateWithoutLikesInput

/**
 * @deprecated Renamed to `Prisma.CommentUpsertWithoutLikesInput`
 */
export type CommentUpsertWithoutLikesInput = Prisma.CommentUpsertWithoutLikesInput

/**
 * @deprecated Renamed to `Prisma.PhotobookUpdateWithoutUserInput`
 */
export type PhotobookUpdateWithoutUserInput = Prisma.PhotobookUpdateWithoutUserInput

/**
 * @deprecated Renamed to `Prisma.CommentUpdateWithoutUserInput`
 */
export type CommentUpdateWithoutUserInput = Prisma.CommentUpdateWithoutUserInput

/**
 * @deprecated Renamed to `Prisma.LikeUpdateWithoutUserInput`
 */
export type LikeUpdateWithoutUserInput = Prisma.LikeUpdateWithoutUserInput

/**
 * @deprecated Renamed to `Prisma.PhotoUpdateWithoutPhotobookInput`
 */
export type PhotoUpdateWithoutPhotobookInput = Prisma.PhotoUpdateWithoutPhotobookInput

/**
 * @deprecated Renamed to `Prisma.CommentUpdateWithoutPhotobookInput`
 */
export type CommentUpdateWithoutPhotobookInput = Prisma.CommentUpdateWithoutPhotobookInput

/**
 * @deprecated Renamed to `Prisma.LikeUpdateWithoutPhotobookInput`
 */
export type LikeUpdateWithoutPhotobookInput = Prisma.LikeUpdateWithoutPhotobookInput

/**
 * @deprecated Renamed to `Prisma.LikeUpdateWithoutCommentInput`
 */
export type LikeUpdateWithoutCommentInput = Prisma.LikeUpdateWithoutCommentInput